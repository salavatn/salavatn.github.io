{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Salavat Nigmatullin Overview: Contacts Generic Dev Basics Python SQL Databases Network Frameworks DevOPS AWS Other Contacts ID Contact Info 1 Name Salavat Nigmatullin 2 Linkedin https://www.linkedin.com/in/snigmatullin/ 3 Telegram https://t.me/NS_Salavat 4 GitHub https://github.com/salavatn Generic ID Area Description 1 10 year in IT Since 15 April 2013 2 Administration: - Linux, Windows, VMware - CentOS, Ubuntu - Windows Server 2008 - 2022 - VMware ESXi 3 Active Directory, DNS Group Policy, DHCP 4 Cisco Networking Switching, Routing and TShoot 5 Vendors Cisco, Fortinet, CheckPoint, Fudo, Forcepoint 6 IT Security PAM, Web Security, Email Security, NGFW, DLP 7 Pre-Sales skills Demo, PoC, Presentation, Workshop 8 PS, Deployment 9 Support skills 10 Training Official and Custom courses 11 Languages English, Russian Dev Basics ID Area Description 1 Python 2 HTML/CSS 3 Bootstrap 4 Jinja Lib jinja2 5 Pug Lib pug4py Python ID Area Description 1 Basics 2 MultiThreading 3 MultiProcessing 4 AsyncIO SQL ID Area Description 1 Basics, DDL, DML 2 Joins, Foreign Key 3 Group Functions 4 Windows Functions 5 Subquery 6 CTE 7 Triggers 8 View 9 Materialized View 10 Partitioning Databases ID Area Description 1 PostgreSQL 2 MSSQL 3 MySQL 4 Database Migration 5 SQL Alchemy 6 Django ORM 7 Pony ORM Network ID Area Description 1 IP, TCP, UDP 2 HTTP, DNS 3 SMTP 4 ICMP, ARP, DHCP 5 VRRP, HSRP 6 OSPF, EIGRP Frameworks ID Area Description 1 FastAPI 2 Flask 3 Django 4 API / Swagger 5 Testing DevOPS ID Area Description 1 Linux Administration 2 AWS 3 Docker 4 Kubernetes 5 SSH Automation 6 Ansible 7 GitHub / git 8 GitHub Actions 9 CircleCI AWS ID Area Description 1 IAM 2 Lambda, SAM, Serverless Framework 3 API Gateway 4 DynamoDB 5 S3 6 SNS 7 SQS 8 SES Other ID Area Description Link 1 OpenCV Repository ComputerVision 2 Web Scrapping 3 Telegram Bots 4 Bash Scripts 5 Markdown, MkDocs Docs MkDocs","title":"Home"},{"location":"#salavat-nigmatullin","text":"Overview: Contacts Generic Dev Basics Python SQL Databases Network Frameworks DevOPS AWS Other","title":"Salavat Nigmatullin"},{"location":"#contacts","text":"ID Contact Info 1 Name Salavat Nigmatullin 2 Linkedin https://www.linkedin.com/in/snigmatullin/ 3 Telegram https://t.me/NS_Salavat 4 GitHub https://github.com/salavatn","title":"Contacts"},{"location":"#generic","text":"ID Area Description 1 10 year in IT Since 15 April 2013 2 Administration: - Linux, Windows, VMware - CentOS, Ubuntu - Windows Server 2008 - 2022 - VMware ESXi 3 Active Directory, DNS Group Policy, DHCP 4 Cisco Networking Switching, Routing and TShoot 5 Vendors Cisco, Fortinet, CheckPoint, Fudo, Forcepoint 6 IT Security PAM, Web Security, Email Security, NGFW, DLP 7 Pre-Sales skills Demo, PoC, Presentation, Workshop 8 PS, Deployment 9 Support skills 10 Training Official and Custom courses 11 Languages English, Russian","title":"Generic"},{"location":"#dev-basics","text":"ID Area Description 1 Python 2 HTML/CSS 3 Bootstrap 4 Jinja Lib jinja2 5 Pug Lib pug4py","title":"Dev Basics"},{"location":"#python","text":"ID Area Description 1 Basics 2 MultiThreading 3 MultiProcessing 4 AsyncIO","title":"Python"},{"location":"#sql","text":"ID Area Description 1 Basics, DDL, DML 2 Joins, Foreign Key 3 Group Functions 4 Windows Functions 5 Subquery 6 CTE 7 Triggers 8 View 9 Materialized View 10 Partitioning","title":"SQL"},{"location":"#databases","text":"ID Area Description 1 PostgreSQL 2 MSSQL 3 MySQL 4 Database Migration 5 SQL Alchemy 6 Django ORM 7 Pony ORM","title":"Databases"},{"location":"#network","text":"ID Area Description 1 IP, TCP, UDP 2 HTTP, DNS 3 SMTP 4 ICMP, ARP, DHCP 5 VRRP, HSRP 6 OSPF, EIGRP","title":"Network"},{"location":"#frameworks","text":"ID Area Description 1 FastAPI 2 Flask 3 Django 4 API / Swagger 5 Testing","title":"Frameworks"},{"location":"#devops","text":"ID Area Description 1 Linux Administration 2 AWS 3 Docker 4 Kubernetes 5 SSH Automation 6 Ansible 7 GitHub / git 8 GitHub Actions 9 CircleCI","title":"DevOPS"},{"location":"#aws","text":"ID Area Description 1 IAM 2 Lambda, SAM, Serverless Framework 3 API Gateway 4 DynamoDB 5 S3 6 SNS 7 SQS 8 SES","title":"AWS"},{"location":"#other","text":"ID Area Description Link 1 OpenCV Repository ComputerVision 2 Web Scrapping 3 Telegram Bots 4 Bash Scripts 5 Markdown, MkDocs Docs MkDocs","title":"Other"},{"location":"AWS/01_connection/","text":"","title":"01 connection"},{"location":"AWS/lambda/","text":"Upload API Function Overview: nmp (node) Install node and check version brew install node node -v v19.8.1 Install serverless npm install -g serverless serverless, create project Create Project \"lambda\" mkdir lambda cd lambda python3 -m venv venv . ./venv/bin/activate Install Serverless and check pip install serverless-wsgi pip list Package Version --------------- ------- MarkupSafe 2.1.2 pip 21.2.4 serverless-wsgi 3.0.2 setuptools 58.0.4 Werkzeug 2.2.3 Create serverless template serverless create --template aws-python3 --path . Install plugin serverless plugin install -n serverless-wsgi Pre-Configure Backup templates mv .gitignore .gitignore_BACKUP mv handler.py handler.py_BACKUP mv serverless.yml serverless.yml_BACKUP Run serverless deploy","title":"Upload API Function"},{"location":"AWS/lambda/#upload-api-function","text":"Overview:","title":"Upload API Function"},{"location":"AWS/lambda/#nmp-node","text":"Install node and check version brew install node node -v v19.8.1 Install serverless npm install -g serverless","title":"nmp (node)"},{"location":"AWS/lambda/#serverless-create-project","text":"Create Project \"lambda\" mkdir lambda cd lambda python3 -m venv venv . ./venv/bin/activate Install Serverless and check pip install serverless-wsgi pip list Package Version --------------- ------- MarkupSafe 2.1.2 pip 21.2.4 serverless-wsgi 3.0.2 setuptools 58.0.4 Werkzeug 2.2.3 Create serverless template serverless create --template aws-python3 --path . Install plugin serverless plugin install -n serverless-wsgi","title":"serverless, create project"},{"location":"AWS/lambda/#pre-configure","text":"Backup templates mv .gitignore .gitignore_BACKUP mv handler.py handler.py_BACKUP mv serverless.yml serverless.yml_BACKUP","title":"Pre-Configure"},{"location":"AWS/lambda/#run","text":"serverless deploy","title":"Run"},{"location":"AWS/s3-bucket/","text":"AWS You will learn \"How to\": 1. Create new Bucket 2. Get list Bucket - Get via RESOURCE - Get via CLIENT 3. Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 4. Check Access Permission Before using Boto3 , you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI . You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user. Configure AWS CLI pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json Amazon S3 examples https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html 1. Create new Bucket Simple code: import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) Code with exceptions import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\") 2. Get list of Bucket 2.1. Get via RESOURCE: import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 2.2. Get via CLIENT: import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 3. Upload file to Bucket Upload via \"RESOURCE\" and \"PUT_OBJECT\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file) Upload via \"CLIENT\" and \"UPLOAD_FILE\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename) 7. Check Access Permission import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"S3 Bucket"},{"location":"AWS/s3-bucket/#aws","text":"You will learn \"How to\": 1. Create new Bucket 2. Get list Bucket - Get via RESOURCE - Get via CLIENT 3. Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 4. Check Access Permission Before using Boto3 , you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI . You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user.","title":"AWS"},{"location":"AWS/s3-bucket/#configure-aws-cli","text":"pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json","title":"Configure AWS CLI"},{"location":"AWS/s3-bucket/#amazon-s3-examples","text":"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html","title":"Amazon S3 examples"},{"location":"AWS/s3-bucket/#1-create-new-bucket","text":"","title":"1. Create new Bucket"},{"location":"AWS/s3-bucket/#simple-code","text":"import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location)","title":"Simple code:"},{"location":"AWS/s3-bucket/#code-with-exceptions","text":"import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\")","title":"Code with exceptions"},{"location":"AWS/s3-bucket/#2-get-list-of-bucket","text":"","title":"2. Get list of Bucket"},{"location":"AWS/s3-bucket/#21-get-via-resource","text":"import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.1. Get via RESOURCE:"},{"location":"AWS/s3-bucket/#22-get-via-client","text":"import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.2. Get via CLIENT:"},{"location":"AWS/s3-bucket/#3-upload-file-to-bucket","text":"","title":"3. Upload file to Bucket"},{"location":"AWS/s3-bucket/#upload-via-resource-and-put_object","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file)","title":"Upload via \"RESOURCE\" and \"PUT_OBJECT\""},{"location":"AWS/s3-bucket/#upload-via-client-and-upload_file","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename)","title":"Upload via \"CLIENT\" and \"UPLOAD_FILE\""},{"location":"AWS/s3-bucket/#7-check-access-permission","text":"import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"7. Check Access Permission"},{"location":"AWS/Serverless/sls/","text":"Serverless Usage CLI \u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b sls serverless <command> <options> sls <command> <options> Create Template Project sls create --template aws-python3 --path . --name SLS_AWS_PY Created Files: handler.py import json def hello(event, context): body = { \"message\": \"Go Serverless v1.0! Your function executed successfully!\", \"input\": event } response = { \"statusCode\": 200, \"body\": json.dumps(body) } return response service: SLS_AWS_PY frameworkVersion: '3' provider: name: aws runtime: python3.9 functions: hello: handler: handler.hello Create own simple project 1. Create Files: touch webapp.py touch serverless.yml 2. WebApp.py import json def get_user(event, context): name = \"Salavat\" surname = \"Nigmatullin\" msg = f\"Hello, {name} {surname}!\" data = {\"message\": msg, \"input\": event} response = {\"statusCode\": 200, \"body\": json.dumps(data)} return response 3. ServerLess.yml service: MyService frameworkVersion: '3' provider: name: aws runtime: python3.9 functions: MyFuncHome: handler: webapp.get_user 4. Serverless Deploy Commands: sls --version sls create --template \"aws-python3\" --path . --name \"name\" sls deploy sls info sls deploy function -f \"name\" sls remove \"name\"","title":"Serverless"},{"location":"AWS/Serverless/sls/#serverless","text":"","title":"Serverless"},{"location":"AWS/Serverless/sls/#usage-cli","text":"\u0412\u044b \u043c\u043e\u0436\u0435\u0442\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043e\u043a\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a\u043e\u043c\u0430\u043d\u0434\u044b sls serverless <command> <options> sls <command> <options>","title":"Usage CLI"},{"location":"AWS/Serverless/sls/#create-template-project","text":"sls create --template aws-python3 --path . --name SLS_AWS_PY","title":"Create Template Project"},{"location":"AWS/Serverless/sls/#created-files","text":"handler.py import json def hello(event, context): body = { \"message\": \"Go Serverless v1.0! Your function executed successfully!\", \"input\": event } response = { \"statusCode\": 200, \"body\": json.dumps(body) } return response service: SLS_AWS_PY frameworkVersion: '3' provider: name: aws runtime: python3.9 functions: hello: handler: handler.hello","title":"Created Files:"},{"location":"AWS/Serverless/sls/#create-own-simple-project","text":"","title":"Create own simple project"},{"location":"AWS/Serverless/sls/#1-create-files","text":"touch webapp.py touch serverless.yml","title":"1. Create Files:"},{"location":"AWS/Serverless/sls/#2-webapppy","text":"import json def get_user(event, context): name = \"Salavat\" surname = \"Nigmatullin\" msg = f\"Hello, {name} {surname}!\" data = {\"message\": msg, \"input\": event} response = {\"statusCode\": 200, \"body\": json.dumps(data)} return response","title":"2. WebApp.py"},{"location":"AWS/Serverless/sls/#3-serverlessyml","text":"service: MyService frameworkVersion: '3' provider: name: aws runtime: python3.9 functions: MyFuncHome: handler: webapp.get_user","title":"3. ServerLess.yml"},{"location":"AWS/Serverless/sls/#4-serverless-deploy","text":"","title":"4. Serverless Deploy"},{"location":"AWS/Serverless/sls/#commands","text":"sls --version sls create --template \"aws-python3\" --path . --name \"name\" sls deploy sls info sls deploy function -f \"name\" sls remove \"name\"","title":"Commands:"},{"location":"AboutMe/info/","text":"\u041f\u043b\u0430\u043d: Generic ID Area Description 1 10 year in IT Since 15 April 2013 2 Administration: - Linux, Windows, VMware - CentOS, Ubuntu - Windows Server 2008 - 2022 - VMware ESXi 3 Active Directory, DNS Group Policy, DHCP 4 Cisco Networking Switching, Routing and TShoot 5 Vendors Cisco, Fortinet, CheckPoint, Fudo, Forcepoint 6 IT Security PAM, Web Security, Email Security, NGFW, DLP 7 Pre-Sales skills Demo, PoC, Presentation, Workshop 8 PS, Deployment 9 Support skills 10 Training Official and Custom courses 11 Languages English, Russian Dev Basics ID Area Description 1 Python 2 HTML/CSS 3 Bootstrap 4 Jinja Lib jinja2 5 Pug Lib pug4py Python ID Area Description 1 Basics 2 MultiThreading 3 MultiProcessing 4 AsyncIO SQL ID Area Description 1 Basics, DDL, DML 2 Joins, Foreign Key 3 Group Functions 4 Windows Functions 5 Subquery 6 CTE 7 Triggers Databases ID Area Description 1 PostgreSQL 2 MSSQL 3 MySQL 4 Database Migration 5 SQL Alchemy 6 Django ORM 7 Pony ORM Network ID Area Description 1 IP, TCP, UDP 2 HTTP, DNS 3 SMTP 4 ICMP, ARP, DHCP 5 VRRP, HSRP 6 OSPF, EIGRP Frameworks ID Area Description 1 FastAPI 2 Flask 3 Django 4 API / Swagger 5 Testing DevOPS ID Area Description 1 Linux Administration 2 AWS 3 Docker 4 Kubernetes 5 SSH Automation 6 Ansible 7 GitHub / git 8 GitHub Actions 9 CircleCI AWS ID Area Description 1 IAM 2 Lambda, SAM, Serverless Framework 3 API Gateway 4 DynamoDB 5 S3 6 SNS 7 SQS 8 SES Other ID Area Description Link 1 OpenCV Repository ComputerVision 2 Web Scrapping 3 Telegram Bots 4 Bash Scripts 5 Markdown, MkDocs Docs MkDocs","title":"Info"},{"location":"AboutMe/info/#generic","text":"ID Area Description 1 10 year in IT Since 15 April 2013 2 Administration: - Linux, Windows, VMware - CentOS, Ubuntu - Windows Server 2008 - 2022 - VMware ESXi 3 Active Directory, DNS Group Policy, DHCP 4 Cisco Networking Switching, Routing and TShoot 5 Vendors Cisco, Fortinet, CheckPoint, Fudo, Forcepoint 6 IT Security PAM, Web Security, Email Security, NGFW, DLP 7 Pre-Sales skills Demo, PoC, Presentation, Workshop 8 PS, Deployment 9 Support skills 10 Training Official and Custom courses 11 Languages English, Russian","title":"Generic"},{"location":"AboutMe/info/#dev-basics","text":"ID Area Description 1 Python 2 HTML/CSS 3 Bootstrap 4 Jinja Lib jinja2 5 Pug Lib pug4py","title":"Dev Basics"},{"location":"AboutMe/info/#python","text":"ID Area Description 1 Basics 2 MultiThreading 3 MultiProcessing 4 AsyncIO","title":"Python"},{"location":"AboutMe/info/#sql","text":"ID Area Description 1 Basics, DDL, DML 2 Joins, Foreign Key 3 Group Functions 4 Windows Functions 5 Subquery 6 CTE 7 Triggers","title":"SQL"},{"location":"AboutMe/info/#databases","text":"ID Area Description 1 PostgreSQL 2 MSSQL 3 MySQL 4 Database Migration 5 SQL Alchemy 6 Django ORM 7 Pony ORM","title":"Databases"},{"location":"AboutMe/info/#network","text":"ID Area Description 1 IP, TCP, UDP 2 HTTP, DNS 3 SMTP 4 ICMP, ARP, DHCP 5 VRRP, HSRP 6 OSPF, EIGRP","title":"Network"},{"location":"AboutMe/info/#frameworks","text":"ID Area Description 1 FastAPI 2 Flask 3 Django 4 API / Swagger 5 Testing","title":"Frameworks"},{"location":"AboutMe/info/#devops","text":"ID Area Description 1 Linux Administration 2 AWS 3 Docker 4 Kubernetes 5 SSH Automation 6 Ansible 7 GitHub / git 8 GitHub Actions 9 CircleCI","title":"DevOPS"},{"location":"AboutMe/info/#aws","text":"ID Area Description 1 IAM 2 Lambda, SAM, Serverless Framework 3 API Gateway 4 DynamoDB 5 S3 6 SNS 7 SQS 8 SES","title":"AWS"},{"location":"AboutMe/info/#other","text":"ID Area Description Link 1 OpenCV Repository ComputerVision 2 Web Scrapping 3 Telegram Bots 4 Bash Scripts 5 Markdown, MkDocs Docs MkDocs","title":"Other"},{"location":"DevOPS/Docker/","text":"Docker Download and run image 1) Check version: docker --version # Docker version 20.10.23, build 7155243 2) Download the Docker image for Postgres using the command: docker pull postgres 3) Check that the image has been successfully downloaded using the command: docker images 4) Run the Postgres container using the command: docker run --name pgsql -e POSTGRES_PASSWORD='P@$$w0rd' -p 5432:5432 -d postgres where: - --name sets the name of the container, - -e defines an environment variable, - -p configures port forwarding, and - -d specifies that the container should be run in detached mode 5) Check that the container is running using the command: docker ps 6) Connect to the Postgres container using the command: psql -h localhost -p 5432 -U postgres 7) If the container has been stopped, check its status using the command: docker ps -a 8) If the container has been stopped, start it using the command: docker start pgsql","title":"Docker"},{"location":"DevOPS/Docker/#docker","text":"","title":"Docker"},{"location":"DevOPS/Docker/#download-and-run-image","text":"1) Check version: docker --version # Docker version 20.10.23, build 7155243 2) Download the Docker image for Postgres using the command: docker pull postgres 3) Check that the image has been successfully downloaded using the command: docker images 4) Run the Postgres container using the command: docker run --name pgsql -e POSTGRES_PASSWORD='P@$$w0rd' -p 5432:5432 -d postgres where: - --name sets the name of the container, - -e defines an environment variable, - -p configures port forwarding, and - -d specifies that the container should be run in detached mode 5) Check that the container is running using the command: docker ps 6) Connect to the Postgres container using the command: psql -h localhost -p 5432 -U postgres 7) If the container has been stopped, check its status using the command: docker ps -a 8) If the container has been stopped, start it using the command: docker start pgsql","title":"Download and run image"},{"location":"DevOPS/EnvVar/","text":"Environment Variables Environment Variables (Temporary) Displays the current environment variables: env Creates a new environment variable (Only in active terminal) export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' Prints the value of the ACCESS_KEY environment variable to the terminal. echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\" Environment Variables (\u0421onstant) Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS","title":"Environment Variables"},{"location":"DevOPS/EnvVar/#environment-variables","text":"","title":"Environment Variables"},{"location":"DevOPS/EnvVar/#environment-variables-temporary","text":"Displays the current environment variables: env Creates a new environment variable (Only in active terminal) export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' Prints the value of the ACCESS_KEY environment variable to the terminal. echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\"","title":"Environment Variables (Temporary)"},{"location":"DevOPS/EnvVar/#environment-variables-onstant","text":"Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS","title":"Environment Variables (\u0421onstant)"},{"location":"DevOPS/SSH_key/","text":"SSH Key SSH Key Generating a SSH key Add SSH key to a remote server Generating a SSH key This instruction will help you generate an ed25519 SSH key using the ssh-keygen command and save it on your computer. An SSH key is used for authentication when connecting to a remote server via the SSH protocol. Open a terminal on your computer. Enter the command: $ cd ~/.ssh $ ssh-keygen -t ed25519 -C \"SSH key for my Ubuntu\" The ssh-keygen program will prompt you to specify the filename to save the key. By default, it suggests saving the key in the id_ed25519 file in the .ssh directory in your home folder. We recommend using a more informative filename to easily identify which key corresponds to which server. Enter Ubuntu_Key as the filename and press Enter. Generating public/private ed25519 key pair. Enter file in which to save the key (/Users/salavat/.ssh/id_ed25519): Ubuntu_Key The ssh-keygen program will prompt you to enter a passphrase to protect the key. This passphrase will be requested each time the key is used to connect to a remote server. Enter the passphrase and press Enter. Enter passphrase (empty for no passphrase): ******** Enter same passphrase again: ******** Your SSH key has been successfully created and saved to the file /Users/salavat/.ssh/Ubuntu_Key . The ssh-keygen program will display the key fingerprint and a \"randomart\" image to verify that the key was created correctly. Your identification has been saved in Ubuntu_Key Your public key has been saved in Ubuntu_Key.pub The key fingerprint is: SHA256:bhun9UY/6bBRL3XixMzmuVw0w6Gl0hEh9isFd5oN+C8 SSH key for my Ubuntu The key's randomart image is: +--[ED25519 256]--+ | +.=.. | | ..= B | | .* + | | o=B .| | S o =X++| | . +E B+| | + o.o.*.o| | . * ..=++ | | o .o.+. | +----[SHA256]-----+ Copy the contents of the public key from the file /Users/salavat/.ssh/Ubuntu.pub and send it to the server administrator to which you want to connect via the SSH protocol. The server administrator must add your public key to the authorized_keys file in your home folder on the server. You're done! You can use your SSH key to securely connect to a remote server via the SSH protocol. Add SSH key to a remote server How to add an SSH key to a remote server and connect via SSH Open your terminal and navigate to your local .ssh directory: cd ~/.ssh Check if you have an existing public and private key pair. The output should show two files, one ending in .pub : ls -ll salavat@Salavat .ssh % ls -ll total 32 -rw------- 1 salavat staff 464 Apr 12 12:10 Ubuntu_Key -rw-r--r-- 1 salavat staff 103 Apr 12 12:10 Ubuntu_Key.pub If you don't have an SSH key pair, generating a SSH key Once you have an SSH key pair, copy the public key to the remote server using ssh-copy-id . Replace Ubuntu_Key.pub with the name of your public key file and svc-admin@172.30.2.2 with your username and remote server's IP address: ssh-copy-id -i Ubuntu_Key.pub svc-admin@172.30.2.2 Enter your remote server password when prompted. Try connecting to the remote server using SSH: ssh -i Ubuntu_Key svc-admin@172.30.2.2 If successful, you should see a prompt on the remote server. Enter passphrase for key 'Ubuntu_Key': ******** Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-69-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Wed Apr 12 09:26:26 AM UTC 2023 System load: 0.16015625 Processes: 194 Usage of /: 21.8% of 30.31GB Users logged in: 1 Memory usage: 20% IPv4 address for ens34: 172.30.2.2 Swap usage: 0% If you have a passphrase for your SSH key, add it to the SSH agent using the following command: eval `ssh-agent` ssh-add Ubuntu_Key Enter your passphrase when prompted. Enter your passphrase when prompted. ssh svc-admin@172.30.2.2","title":"SSH Key"},{"location":"DevOPS/SSH_key/#ssh-key","text":"SSH Key Generating a SSH key Add SSH key to a remote server","title":"SSH Key"},{"location":"DevOPS/SSH_key/#generating-a-ssh-key","text":"This instruction will help you generate an ed25519 SSH key using the ssh-keygen command and save it on your computer. An SSH key is used for authentication when connecting to a remote server via the SSH protocol. Open a terminal on your computer. Enter the command: $ cd ~/.ssh $ ssh-keygen -t ed25519 -C \"SSH key for my Ubuntu\" The ssh-keygen program will prompt you to specify the filename to save the key. By default, it suggests saving the key in the id_ed25519 file in the .ssh directory in your home folder. We recommend using a more informative filename to easily identify which key corresponds to which server. Enter Ubuntu_Key as the filename and press Enter. Generating public/private ed25519 key pair. Enter file in which to save the key (/Users/salavat/.ssh/id_ed25519): Ubuntu_Key The ssh-keygen program will prompt you to enter a passphrase to protect the key. This passphrase will be requested each time the key is used to connect to a remote server. Enter the passphrase and press Enter. Enter passphrase (empty for no passphrase): ******** Enter same passphrase again: ******** Your SSH key has been successfully created and saved to the file /Users/salavat/.ssh/Ubuntu_Key . The ssh-keygen program will display the key fingerprint and a \"randomart\" image to verify that the key was created correctly. Your identification has been saved in Ubuntu_Key Your public key has been saved in Ubuntu_Key.pub The key fingerprint is: SHA256:bhun9UY/6bBRL3XixMzmuVw0w6Gl0hEh9isFd5oN+C8 SSH key for my Ubuntu The key's randomart image is: +--[ED25519 256]--+ | +.=.. | | ..= B | | .* + | | o=B .| | S o =X++| | . +E B+| | + o.o.*.o| | . * ..=++ | | o .o.+. | +----[SHA256]-----+ Copy the contents of the public key from the file /Users/salavat/.ssh/Ubuntu.pub and send it to the server administrator to which you want to connect via the SSH protocol. The server administrator must add your public key to the authorized_keys file in your home folder on the server. You're done! You can use your SSH key to securely connect to a remote server via the SSH protocol.","title":"Generating a SSH key"},{"location":"DevOPS/SSH_key/#add-ssh-key-to-a-remote-server","text":"How to add an SSH key to a remote server and connect via SSH Open your terminal and navigate to your local .ssh directory: cd ~/.ssh Check if you have an existing public and private key pair. The output should show two files, one ending in .pub : ls -ll salavat@Salavat .ssh % ls -ll total 32 -rw------- 1 salavat staff 464 Apr 12 12:10 Ubuntu_Key -rw-r--r-- 1 salavat staff 103 Apr 12 12:10 Ubuntu_Key.pub If you don't have an SSH key pair, generating a SSH key Once you have an SSH key pair, copy the public key to the remote server using ssh-copy-id . Replace Ubuntu_Key.pub with the name of your public key file and svc-admin@172.30.2.2 with your username and remote server's IP address: ssh-copy-id -i Ubuntu_Key.pub svc-admin@172.30.2.2 Enter your remote server password when prompted. Try connecting to the remote server using SSH: ssh -i Ubuntu_Key svc-admin@172.30.2.2 If successful, you should see a prompt on the remote server. Enter passphrase for key 'Ubuntu_Key': ******** Welcome to Ubuntu 22.04.1 LTS (GNU/Linux 5.15.0-69-generic x86_64) * Documentation: https://help.ubuntu.com * Management: https://landscape.canonical.com * Support: https://ubuntu.com/advantage System information as of Wed Apr 12 09:26:26 AM UTC 2023 System load: 0.16015625 Processes: 194 Usage of /: 21.8% of 30.31GB Users logged in: 1 Memory usage: 20% IPv4 address for ens34: 172.30.2.2 Swap usage: 0% If you have a passphrase for your SSH key, add it to the SSH agent using the following command: eval `ssh-agent` ssh-add Ubuntu_Key Enter your passphrase when prompted. Enter your passphrase when prompted. ssh svc-admin@172.30.2.2","title":"Add SSH key to a remote server"},{"location":"DevOPS/SSH_tmux/","text":"Terminal Multiplexer (Tmux) \"Tmux (Terminal Multiplexer) is a free and open-source program for managing multiple virtual terminals inside one physical terminal. With tmux, you can split your terminal into multiple windows and panes, switch between them, and run multiple terminal sessions in one window. Additionally, tmux allows you to save terminal sessions and restore them at any time, which can be very useful for working with long-running processes. Tmux can be especially useful for developers and system administrators who often work with multiple terminals and processes simultaneously. It can also be useful for users who want to use the same terminal to run multiple tasks, including for remote server management.\" Create New Session Start a new Tmux session with the name \"Ping_Google_com\": tmux new-session -s Ping_Google_com Ping Google.com svc-admin@ubuntu:~$ ping google.com PING google.com (173.194.222.113) 56(84) bytes of data. 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=1 ttl=53 time=36.6 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=2 ttl=53 time=36.4 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=3 ttl=53 time=36.5 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=4 ttl=53 time=36.6 ms To detach from the current Tmux session and leave the ping running, use the hotkey Ctrl+B and then press D . List the existing Tmux sessions to verify that the \"Ping_Google_com\" session is still running: tmux list-sessions The output should be similar to this: Ping_Google_com: 1 windows (created Wed Apr 12 10:03:11 2023) To reattach to the \"Ping_Google_com\" session and see the output of the ping command, use the following command: tmux attach-session -t Ping_Google_com This will reattach you to the Tmux session and you can see the output of the ping command. You can detach from the session again using the hotkey Ctrl+B and then pressing D . Delete Session To close a Tmux session, you first need to detach from it. You can do this by using the hotkey Ctrl-B and then pressing D . Once you have detached from the session, you can close it by using the tmux kill-session command followed by the name or ID of the session you want to close. Check list session: tmux list-sessions Ping_Google_com: 1 windows (created Wed Apr 12 10:03:11 2023) start-web-server: 1 windows (created Wed Apr 12 10:01:46 2023) tmux kill-session -t Ping_Google_com","title":"Tmux"},{"location":"DevOPS/SSH_tmux/#terminal-multiplexer-tmux","text":"\"Tmux (Terminal Multiplexer) is a free and open-source program for managing multiple virtual terminals inside one physical terminal. With tmux, you can split your terminal into multiple windows and panes, switch between them, and run multiple terminal sessions in one window. Additionally, tmux allows you to save terminal sessions and restore them at any time, which can be very useful for working with long-running processes. Tmux can be especially useful for developers and system administrators who often work with multiple terminals and processes simultaneously. It can also be useful for users who want to use the same terminal to run multiple tasks, including for remote server management.\"","title":"Terminal Multiplexer (Tmux)"},{"location":"DevOPS/SSH_tmux/#create-new-session","text":"Start a new Tmux session with the name \"Ping_Google_com\": tmux new-session -s Ping_Google_com Ping Google.com svc-admin@ubuntu:~$ ping google.com PING google.com (173.194.222.113) 56(84) bytes of data. 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=1 ttl=53 time=36.6 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=2 ttl=53 time=36.4 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=3 ttl=53 time=36.5 ms 64 bytes from lo-in-f113.1e100.net (173.194.222.113): icmp_seq=4 ttl=53 time=36.6 ms To detach from the current Tmux session and leave the ping running, use the hotkey Ctrl+B and then press D . List the existing Tmux sessions to verify that the \"Ping_Google_com\" session is still running: tmux list-sessions The output should be similar to this: Ping_Google_com: 1 windows (created Wed Apr 12 10:03:11 2023) To reattach to the \"Ping_Google_com\" session and see the output of the ping command, use the following command: tmux attach-session -t Ping_Google_com This will reattach you to the Tmux session and you can see the output of the ping command. You can detach from the session again using the hotkey Ctrl+B and then pressing D .","title":"Create New Session"},{"location":"DevOPS/SSH_tmux/#delete-session","text":"To close a Tmux session, you first need to detach from it. You can do this by using the hotkey Ctrl-B and then pressing D . Once you have detached from the session, you can close it by using the tmux kill-session command followed by the name or ID of the session you want to close. Check list session: tmux list-sessions Ping_Google_com: 1 windows (created Wed Apr 12 10:03:11 2023) start-web-server: 1 windows (created Wed Apr 12 10:01:46 2023) tmux kill-session -t Ping_Google_com","title":"Delete Session"},{"location":"GitHub/EnvVars/","text":"3. GitHub Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"EnvVars"},{"location":"GitHub/EnvVars/#3-github","text":"Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"3. GitHub"},{"location":"PostgreSQL/Querys/","text":"SQL Queries Check Tables: SELECT table_name AS \"Table Name\" FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = 'public'; from sqlalchemy import Table, Column, Integer, String, MetaData meta = MetaData() clients = Table( 'clients', meta, Column('ID', Integer, primary_key = True), Column('FirstName', String), Column('LastName', String), Column('Balance', String), Column('Birthday', String), Column('Email', String) ) ID = 1 fname = fake.first_name() lname = fake.last_name() balance = fake.random_int(11, 243589) birth_date = fake.date_of_birth() email = fake.company_email()","title":"SQL Queries"},{"location":"PostgreSQL/Querys/#sql-queries","text":"","title":"SQL Queries"},{"location":"PostgreSQL/Querys/#check-tables","text":"SELECT table_name AS \"Table Name\" FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = 'public'; from sqlalchemy import Table, Column, Integer, String, MetaData meta = MetaData() clients = Table( 'clients', meta, Column('ID', Integer, primary_key = True), Column('FirstName', String), Column('LastName', String), Column('Balance', String), Column('Birthday', String), Column('Email', String) ) ID = 1 fname = fake.first_name() lname = fake.last_name() balance = fake.random_int(11, 243589) birth_date = fake.date_of_birth() email = fake.company_email()","title":"Check Tables:"},{"location":"Python/Base/Interview/","text":"Question 01 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Python? \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u044f\u0437\u044b\u043a\u0430 Python \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f? Answer: Python - \u044d\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439, \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0435\u0439. Python \u0441\u043e\u0437\u0434\u0430\u043d \u0432 \u043a\u043e\u043d\u0446\u0435 1980-\u0445 \u0433\u043e\u0434\u043e\u0432 \u0413\u0432\u0438\u0434\u043e \u0432\u0430\u043d \u0420\u043e\u0441\u0441\u0443\u043c\u043e\u043c \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u0442\u0430\u043b \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u0438\u0440\u0435. \u041e\u043d \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u043b\u0435\u0433\u043a\u0438\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u044f\u0437\u044b\u043a\u0430 Python \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430: Python \u0438\u043c\u0435\u0435\u0442 \u0447\u0438\u0441\u0442\u044b\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u043b\u0435\u0433\u043a\u0438\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438. \u041a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u044c: Python \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Windows, Linux \u0438 macOS. \u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439: Python \u0438\u043c\u0435\u0435\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a: Python \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c, \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0438. \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438: \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u043c\u0443 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u043c\u0443 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0443 Python, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0435\u043d \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0430 \u0441\u0442\u0438\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u0433\u0438\u0431\u043a\u0438\u043c \u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0428\u0438\u0440\u043e\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445: Python \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438, \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445. Question 02 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 PEP8? \u0417\u0430\u0447\u0435\u043c \u043e\u043d \u043d\u0443\u0436\u0435\u043d? Answer: PEP8 (Python Enhancement Proposal 8) - \u044d\u0442\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043a\u043e\u0434\u0430 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u043a\u043e\u0434. PEP8 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0435\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438. \u041e\u043d \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0447\u0442\u0435\u043d\u0438\u0435, \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c PEP8 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u043a\u043e\u0434\u0430. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c PEP8. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, pylint \u0438\u043b\u0438 flake8), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442 \u043a\u043e\u0434 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c PEP8, \u0438 IDE, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430. Question 03 \u041a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python? Answer: Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f: \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: int (\u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430), float (\u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439), complex (\u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430). \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445: bool (\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f True \u0438\u043b\u0438 False). \u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: str (\u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445: list (\u0441\u043f\u0438\u0441\u043a\u0438), tuple (\u043a\u043e\u0440\u0442\u0435\u0436\u0438), set (\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430), dict (\u0441\u043b\u043e\u0432\u0430\u0440\u0438). \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: bytes (\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438), bytearray (\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438), None (\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f). Python \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. Question 04 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043f\u0438\u0441\u043e\u043a (list) \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435? Answer: \u0421\u043f\u0438\u0441\u043e\u043a (list) - \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u043f\u0438\u0441\u043a\u0438 \u0432 Python \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430. \u0412 Python \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430: append() - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043f\u0438\u0441\u043a\u0430. insert() - \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e. extend() - \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430. remove() - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. pop() - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. index() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. count() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435. sort() - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430. reverse() - \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043d\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 my_list = [1, 2, 3, 4, 5] # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043f\u0438\u0441\u043a\u0430 my_list.append(6) # \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e 2 my_list.insert(2, 7) # \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c my_list.extend([8, 9, 10]) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 3 my_list.remove(3) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c 4 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 popped_value = my_list.pop(4) # \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 5 index_of_five = my_list.index(5) # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 7 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 count_of_sevens = my_list.count(7) # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 my_list.sort() # \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 my_list.reverse() Question 05 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u0440\u0442\u0435\u0436 (tuple) \u0432 Python? \u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c? Answer: \u041a\u043e\u0440\u0442\u0435\u0436 (tuple) - \u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u0443\u044e \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 \u0441\u043f\u0438\u0441\u043a\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b, \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\u043c\u0438: \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0441\u0442\u044c: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0441\u043f\u0438\u0441\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438. \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u0443\u0433\u043b\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a, \u0430 \u0441\u043f\u0438\u0441\u043a\u0438 - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b, \u0438\u043c\u0435\u043d\u0430, \u0434\u0430\u0442\u044b, \u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0430\u0437\u043c\u0435\u0440: \u041a\u043e\u0440\u0442\u0435\u0436\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438, \u0447\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0435 \u043d\u0443\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u043f\u0430\u043c\u044f\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u0438 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 my_tuple = (1, 2, 3, 4, 5) # \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 print(my_tuple[0]) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 1 # \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 for element in my_tuple: print(element) # \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 my_tuple[0] = 6 # \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 TypeError Question 06 \u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0446\u0438\u043a\u043b\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python? Answer: Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u0446\u0438\u043a\u043b\u043e\u0432: \u0426\u0438\u043a\u043b for: \u0426\u0438\u043a\u043b for \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440: fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits: print(fruit) \u0426\u0438\u043a\u043b while: \u0426\u0438\u043a\u043b while \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u043d\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: i = 1 while i < 6: print(i) i += 1 \u041e\u0431\u0430 \u0446\u0438\u043a\u043b\u0430 \u0438\u043c\u0435\u044e\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 for \u0438 while, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0446\u0438\u043a\u043b\u0430. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0446\u0438\u043a\u043b for \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0430 \u0446\u0438\u043a\u043b while - \u043a\u043e\u0433\u0434\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f. Question 07 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python? \u041a\u0430\u043a \u043e\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f? Answer: \u0424\u0443\u043d\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 def, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0438 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435: def say_hello(name): print(\"Hello, \" + name) \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 say_hello - \u044d\u0442\u043e \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, name - \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0414\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0435 \u0438\u043c\u044f, \u0430 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0435\u0441\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 say_hello: say_hello(\"John\") \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, John\". \u0422\u0430\u043a\u0436\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 return . \u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443: def add_numbers(a, b): return a + b \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f add_numbers \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 a \u0438 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: result = add_numbers(2, 3) print(result) \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f add_numbers \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 2 \u0438 3, \u0438 \u0435\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (5) \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 result, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 print(). Question 08 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438? Answer: \u041c\u043e\u0434\u0443\u043b\u044c \u0432 Python - \u044d\u0442\u043e \u0444\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 Python \u0443\u0436\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043c\u043d\u043e\u0433\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, math, random, datetime, re \u0438 \u0434\u0440\u0443\u0433\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Python. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 pip. \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 import. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f math, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434: import math print(math.sqrt(9)) # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d 3.0 \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c math \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e sqrt() \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u0438\u0437 \u0447\u0438\u0441\u043b\u0430 9. \u041a\u0440\u043e\u043c\u0435 \u043e\u0431\u0449\u0435\u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430. Question 09 \u041a\u0430\u043a\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 Python? Answer: \u0412 Python \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432: \u041f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u044d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u0432 \u0435\u0435 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0435. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440: def sum(a, b): return a + b print(sum(2, 3)) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 5 \u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u0438\u043c\u0435\u043d\u0438. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438 \u0435\u0441\u043b\u0438 \u0438\u0445 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442 \u044f\u0432\u043d\u043e, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440: def greet(name, greeting='Hello'): print(greeting + ', ' + name) greet('Alice') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'Hello, Alice' greet('Bob', 'Hi') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'Hi, Bob' \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u043e \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u043e \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440: def sum(*args): total = 0 for arg in args: total += arg return total print(sum(1, 2, 3, 4, 5)) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 15 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0434\u0432\u0443\u043c\u044f \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430\u043c\u0438: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440: def print_info(**kwargs): for key, value in kwargs.items(): print(key + ': ' + str(value)) print_info(name='Alice', age=25, city='New York') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'name: Alice', 'age: 25', 'city: New York' \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432 Python \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u043a \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0432\u044b\u0437\u043e\u0432\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0439. Question 10 \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python? Answer: Lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python - \u044d\u0442\u043e \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u0430\u044f (\u0431\u0435\u0437\u044b\u043c\u044f\u043d\u043d\u0430\u044f) \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043a\u043e\u0434\u0430. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043d\u043e \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0435\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: lambda arguments: expression \u0433\u0434\u0435 arguments - \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e, \u0430 expression - \u044d\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. Lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438: # \u0421\u043e\u0437\u0434\u0430\u0435\u043c lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0447\u0438\u0441\u043b\u0430 square = lambda x: x**2 # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044e result = square(5) # \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 25 \u041e\u0431\u044b\u0447\u043d\u043e lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a map() , filter() , reduce() . \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432 \u043a\u043e\u0434\u0435. Question 11 \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u041e\u041e\u041f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python? Answer: Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u041e\u041e\u041f (\u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f), \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c, \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e. \u041d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 - \u044d\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u041a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0430 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u0438\u043b\u0438 \u0441\u0443\u043f\u0435\u0440\u043a\u043b\u0430\u0441\u0441\u043e\u043c. \u0412 Python \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 class , \u0430 \u0437\u0430\u0442\u0435\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c - \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0438\u043c\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430, \u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u041f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c \u0432 Python \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432 \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u0445. \u0418\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f - \u044d\u0442\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0441\u043a\u0440\u044b\u0442\u044c \u0438\u0445 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0435\u0441\u0430\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f. \u0412 Python \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0432\u043e\u0439\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0443\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u0412 Python \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043d\u043e \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442 \u0435\u0433\u043e. \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u044b \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u0445. Question 12 \u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432 Python? \u0418 \u0447\u0435\u043c \u0438\u0445 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e? Answer: \u0412 Python \u043c\u0435\u0442\u043e\u0434 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0436\u0435 - \u044d\u0442\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041c\u0435\u0442\u043e\u0434\u044b \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043e\u0431\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u041e\u0434\u043d\u0430\u043a\u043e, \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u044b \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0438\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0438 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u043a\u0440\u044b\u0442\u044b\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430 (\u0442\u0430\u043a\u0438\u043c \u043a\u0430\u043a self.__private_variable), \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430. \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u043c\u0435\u0436\u0434\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432 Python: class MyClass: def __init__(self, value): self.value = value def my_method(self): print(f'The value is {self.value}') def my_function(value): print(f'The value is {value}') # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 my_object = MyClass(10) # \u0432\u044b\u0437\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430 \u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 my_object.my_method() # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 'The value is 10' # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 my_function(10) # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 'The value is 10' \u0417\u0434\u0435\u0441\u044c my_method() \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 MyClass , \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 my_object . \u0424\u0443\u043d\u043a\u0446\u0438\u044f my_function() \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043d\u0438 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432 Python? \u041a\u0430\u043a \u043e\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Python? \u041a\u0430\u043a \u043e\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442? \u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Python? \u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u043e\u0434\u0443\u043b\u044c unittest \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u043c\u0435\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f unittest \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 Python \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 virtualenv \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c virtualenv \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 GIL (Global Interpreter Lock) \u0432 Python? \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 GIL \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 NumPy \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Pandas \u0432 Python?","title":"Interview"},{"location":"Python/Base/Interview/#question-01","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 Python? \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u044f\u0437\u044b\u043a\u0430 Python \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f?","title":"Question 01"},{"location":"Python/Base/Interview/#answer","text":"Python - \u044d\u0442\u043e \u0432\u044b\u0441\u043e\u043a\u043e\u0443\u0440\u043e\u0432\u043d\u0435\u0432\u044b\u0439, \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0441 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u0435\u0439. Python \u0441\u043e\u0437\u0434\u0430\u043d \u0432 \u043a\u043e\u043d\u0446\u0435 1980-\u0445 \u0433\u043e\u0434\u043e\u0432 \u0413\u0432\u0438\u0434\u043e \u0432\u0430\u043d \u0420\u043e\u0441\u0441\u0443\u043c\u043e\u043c \u0438 \u0431\u044b\u0441\u0442\u0440\u043e \u0441\u0442\u0430\u043b \u043e\u0434\u043d\u0438\u043c \u0438\u0437 \u0441\u0430\u043c\u044b\u0445 \u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u044b\u0445 \u044f\u0437\u044b\u043a\u043e\u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043c\u0438\u0440\u0435. \u041e\u043d \u0438\u043c\u0435\u0435\u0442 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u043b\u0435\u0433\u043a\u0438\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432 \u044f\u0437\u044b\u043a\u0430 Python \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: \u041f\u0440\u043e\u0441\u0442\u043e\u0442\u0430: Python \u0438\u043c\u0435\u0435\u0442 \u0447\u0438\u0441\u0442\u044b\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u043b\u0435\u0433\u043a\u0438\u043c \u0432 \u0438\u0437\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0438. \u041a\u0440\u043e\u0441\u0441\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0435\u043d\u043d\u043e\u0441\u0442\u044c: Python \u043c\u043e\u0436\u0435\u0442 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f Windows, Linux \u0438 macOS. \u0411\u043e\u043b\u044c\u0448\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439: Python \u0438\u043c\u0435\u0435\u0442 \u0448\u0438\u0440\u043e\u043a\u0438\u0439 \u0432\u044b\u0431\u043e\u0440 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a \u0438 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0438\u0442\u044c \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438. \u0418\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0438\u0440\u0443\u0435\u043c\u044b\u0439 \u044f\u0437\u044b\u043a: Python \u043d\u0435 \u0442\u0440\u0435\u0431\u0443\u0435\u0442 \u043a\u043e\u043c\u043f\u0438\u043b\u044f\u0446\u0438\u0438 \u043f\u0435\u0440\u0435\u0434 \u0437\u0430\u043f\u0443\u0441\u043a\u043e\u043c, \u0447\u0442\u043e \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0438 \u043e\u0442\u043b\u0430\u0434\u043a\u0438. \u0412\u044b\u0441\u043e\u043a\u0430\u044f \u0441\u043a\u043e\u0440\u043e\u0441\u0442\u044c \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438: \u0431\u043b\u0430\u0433\u043e\u0434\u0430\u0440\u044f \u043f\u0440\u043e\u0441\u0442\u043e\u043c\u0443 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u043e\u043c\u0443 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441\u0443 Python, \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0437\u043d\u0430\u0447\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u043a\u043e\u0440\u0435\u043d \u043f\u043e \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044e \u0441 \u0434\u0440\u0443\u0433\u0438\u043c\u0438 \u044f\u0437\u044b\u043a\u0430\u043c\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u041f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f: Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043e\u0431\u0430 \u0441\u0442\u0438\u043b\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0447\u0442\u043e \u0434\u0435\u043b\u0430\u0435\u0442 \u0435\u0433\u043e \u0433\u0438\u0431\u043a\u0438\u043c \u0438 \u0443\u043d\u0438\u0432\u0435\u0440\u0441\u0430\u043b\u044c\u043d\u044b\u043c \u044f\u0437\u044b\u043a\u043e\u043c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f. \u0428\u0438\u0440\u043e\u043a\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445: Python \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u044f\u0445, \u0430\u043d\u0430\u043b\u0438\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u0435\u0431-\u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0435, \u0438\u0433\u0440\u043e\u0432\u043e\u0439 \u0438\u043d\u0434\u0443\u0441\u0442\u0440\u0438\u0438, \u043c\u0430\u0448\u0438\u043d\u043d\u043e\u043c \u043e\u0431\u0443\u0447\u0435\u043d\u0438\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u043b\u0430\u0441\u0442\u044f\u0445.","title":"Answer:"},{"location":"Python/Base/Interview/#question-02","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 PEP8? \u0417\u0430\u0447\u0435\u043c \u043e\u043d \u043d\u0443\u0436\u0435\u043d?","title":"Question 02"},{"location":"Python/Base/Interview/#answer_1","text":"PEP8 (Python Enhancement Proposal 8) - \u044d\u0442\u043e \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438 \u043f\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044e \u043a\u043e\u0434\u0430 \u043d\u0430 \u044f\u0437\u044b\u043a\u0435 Python. \u042d\u0442\u043e\u0442 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442 \u043e\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u044b \u0438 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0444\u043e\u0440\u043c\u0430\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f, \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u044b\u0445, \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0447\u0438\u0442\u0430\u0435\u043c\u044b\u0439 \u0438 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u0439 \u043a\u043e\u0434. PEP8 \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0432\u0430\u0436\u043d\u044b\u043c \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u043c \u0434\u043b\u044f \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043e\u0434\u0430 \u0438 \u0435\u0433\u043e \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u043a\u0438. \u041e\u043d \u0443\u043f\u0440\u043e\u0449\u0430\u0435\u0442 \u0447\u0442\u0435\u043d\u0438\u0435, \u043f\u043e\u043d\u0438\u043c\u0430\u043d\u0438\u0435 \u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u043a\u043e\u0434\u0430 \u0434\u043b\u044f \u0434\u0440\u0443\u0433\u0438\u0445 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0431\u0443\u0434\u0443\u0442 \u0440\u0430\u0431\u043e\u0442\u0430\u0442\u044c \u0441 \u043d\u0438\u043c \u0432 \u0431\u0443\u0434\u0443\u0449\u0435\u043c. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c PEP8 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0441\u043d\u0438\u0437\u0438\u0442\u044c \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043e\u0448\u0438\u0431\u043e\u043a \u0438 \u0443\u043b\u0443\u0447\u0448\u0438\u0442\u044c \u043f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u044c \u043f\u0440\u0438 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0438 \u0438 \u0441\u043e\u043f\u0440\u043e\u0432\u043e\u0436\u0434\u0435\u043d\u0438\u0438 \u043a\u043e\u0434\u0430. \u0421\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0438\u043d\u0441\u0442\u0440\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0438 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u043c\u043e\u0433\u0430\u044e\u0442 \u0440\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u0447\u0438\u043a\u0430\u043c \u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0440\u0435\u043a\u043e\u043c\u0435\u043d\u0434\u0430\u0446\u0438\u044f\u043c PEP8. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0442 \u043b\u0438\u043d\u0442\u0435\u0440\u044b (\u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, pylint \u0438\u043b\u0438 flake8), \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u043e\u0432\u0435\u0440\u044f\u044e\u0442 \u043a\u043e\u0434 \u043d\u0430 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u0430\u043c PEP8, \u0438 IDE, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u043e\u0434\u0441\u0432\u0435\u0447\u0438\u0432\u0430\u044e\u0442 \u043d\u0430\u0440\u0443\u0448\u0435\u043d\u0438\u044f \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043e\u0432 \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043e\u0434\u0430.","title":"Answer:"},{"location":"Python/Base/Interview/#question-03","text":"\u041a\u0430\u043a\u0438\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python?","title":"Question 03"},{"location":"Python/Base/Interview/#answer_2","text":"Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445, \u0432\u043a\u043b\u044e\u0447\u0430\u044f: \u0427\u0438\u0441\u043b\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: int (\u0446\u0435\u043b\u044b\u0435 \u0447\u0438\u0441\u043b\u0430), float (\u0447\u0438\u0441\u043b\u0430 \u0441 \u043f\u043b\u0430\u0432\u0430\u044e\u0449\u0435\u0439 \u0437\u0430\u043f\u044f\u0442\u043e\u0439), complex (\u043a\u043e\u043c\u043f\u043b\u0435\u043a\u0441\u043d\u044b\u0435 \u0447\u0438\u0441\u043b\u0430). \u041b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445: bool (\u043b\u043e\u0433\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f True \u0438\u043b\u0438 False). \u0421\u0442\u0440\u043e\u043a\u043e\u0432\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: str (\u0441\u0442\u0440\u043e\u043a\u0438 \u0441\u0438\u043c\u0432\u043e\u043b\u043e\u0432). \u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u044b \u0434\u0430\u043d\u043d\u044b\u0445: list (\u0441\u043f\u0438\u0441\u043a\u0438), tuple (\u043a\u043e\u0440\u0442\u0435\u0436\u0438), set (\u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u0430), dict (\u0441\u043b\u043e\u0432\u0430\u0440\u0438). \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0434\u0430\u043d\u043d\u044b\u0445: bytes (\u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438), bytearray (\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0435 \u0431\u0430\u0439\u0442\u043e\u0432\u044b\u0435 \u0441\u0442\u0440\u043e\u043a\u0438), None (\u043e\u0442\u0441\u0443\u0442\u0441\u0442\u0432\u0438\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f). Python \u0442\u0430\u043a\u0436\u0435 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0438\u043d\u0430\u043c\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0442\u0438\u043f\u0438\u0437\u0430\u0446\u0438\u044e, \u0442\u043e \u0435\u0441\u0442\u044c \u0442\u0438\u043f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u043c\u043e\u0436\u0435\u0442 \u0438\u0437\u043c\u0435\u043d\u044f\u0442\u044c\u0441\u044f \u0432 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b.","title":"Answer:"},{"location":"Python/Base/Interview/#question-04","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0441\u043f\u0438\u0441\u043e\u043a (list) \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043c\u0435\u0442\u043e\u0434\u044b \u0441\u043f\u0438\u0441\u043a\u0430 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435?","title":"Question 04"},{"location":"Python/Base/Interview/#answer_3","text":"\u0421\u043f\u0438\u0441\u043e\u043a (list) - \u044d\u0442\u043e \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python, \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445. \u0421\u043f\u0438\u0441\u043a\u0438 \u0432 Python \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438, \u0447\u0442\u043e \u043e\u0437\u043d\u0430\u0447\u0430\u0435\u0442, \u0447\u0442\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u0438\u043b\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0441\u043f\u0438\u0441\u043a\u0430. \u0412 Python \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441\u043e \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438. \u041d\u0435\u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0438\u0437 \u043d\u0430\u0438\u0431\u043e\u043b\u0435\u0435 \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430: append() - \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043f\u0438\u0441\u043a\u0430. insert() - \u0432\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0430 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u0443\u044e \u043f\u043e\u0437\u0438\u0446\u0438\u044e. extend() - \u0440\u0430\u0441\u0448\u0438\u0440\u044f\u0435\u0442 \u0441\u043f\u0438\u0441\u043e\u043a, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u044f \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0438\u0437 \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0441\u043f\u0438\u0441\u043a\u0430. remove() - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0432\u044b\u0439 \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u044b\u0439 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. pop() - \u0443\u0434\u0430\u043b\u044f\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 \u0438\u043d\u0434\u0435\u043a\u0441\u0443 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435. index() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u043d\u0434\u0435\u043a\u0441 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c. count() - \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441 \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u044b\u043c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c \u0432 \u0441\u043f\u0438\u0441\u043a\u0435. sort() - \u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u0441\u043f\u0438\u0441\u043a\u0430. reverse() - \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u0442 \u043f\u043e\u0440\u044f\u0434\u043e\u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u043d\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 my_list = [1, 2, 3, 4, 5] # \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0432 \u043a\u043e\u043d\u0435\u0446 \u0441\u043f\u0438\u0441\u043a\u0430 my_list.append(6) # \u0432\u0441\u0442\u0430\u0432\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u043d\u0430 \u043f\u043e\u0437\u0438\u0446\u0438\u044e 2 my_list.insert(2, 7) # \u0440\u0430\u0441\u0448\u0438\u0440\u0435\u043d\u0438\u0435 \u0441\u043f\u0438\u0441\u043a\u0430 \u0434\u0440\u0443\u0433\u0438\u043c \u0441\u043f\u0438\u0441\u043a\u043e\u043c my_list.extend([8, 9, 10]) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 3 my_list.remove(3) # \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0435 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441 \u0438\u043d\u0434\u0435\u043a\u0441\u043e\u043c 4 \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435 \u0435\u0433\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 popped_value = my_list.pop(4) # \u043f\u043e\u0438\u0441\u043a \u0438\u043d\u0434\u0435\u043a\u0441\u0430 \u043f\u0435\u0440\u0432\u043e\u0433\u043e \u0432\u0441\u0442\u0440\u0435\u0447\u0435\u043d\u043d\u043e\u0433\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0430 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 5 index_of_five = my_list.index(5) # \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435\u043c 7 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 count_of_sevens = my_list.count(7) # \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 my_list.sort() # \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435 \u043f\u043e\u0440\u044f\u0434\u043a\u0430 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u0441\u043f\u0438\u0441\u043a\u0430 \u043d\u0430 \u043e\u0431\u0440\u0430\u0442\u043d\u044b\u0439 my_list.reverse()","title":"Answer:"},{"location":"Python/Base/Interview/#question-05","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043a\u043e\u0440\u0442\u0435\u0436 (tuple) \u0432 Python? \u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0441\u043f\u0438\u0441\u043a\u043e\u043c \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u043c?","title":"Question 05"},{"location":"Python/Base/Interview/#answer_4","text":"\u041a\u043e\u0440\u0442\u0435\u0436 (tuple) - \u044d\u0442\u043e \u0442\u0430\u043a\u0436\u0435 \u043e\u0434\u0438\u043d \u0438\u0437 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0445 \u0442\u0438\u043f\u043e\u0432 \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 Python, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u043e\u0431\u043e\u0439 \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u0443\u044e \u0443\u043f\u043e\u0440\u044f\u0434\u043e\u0447\u0435\u043d\u043d\u0443\u044e \u043a\u043e\u043b\u043b\u0435\u043a\u0446\u0438\u044e \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043b\u044e\u0431\u043e\u0439 \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445, \u0442\u0430\u043a \u0436\u0435 \u043a\u0430\u043a \u0438 \u0441\u043f\u0438\u0441\u043a\u0438. \u041e\u0441\u043d\u043e\u0432\u043d\u043e\u0435 \u043e\u0442\u043b\u0438\u0447\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0435\u0439 \u043e\u0442 \u0441\u043f\u0438\u0441\u043a\u043e\u0432 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b \u043f\u043e\u0441\u043b\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f, \u0442\u043e \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u043d\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u044b, \u0443\u0434\u0430\u043b\u0435\u043d\u044b \u0438\u043b\u0438 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u044b. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0441\u043f\u0438\u0441\u043a\u0430\u043c\u0438 \u0438 \u043a\u043e\u0440\u0442\u0435\u0436\u0430\u043c\u0438: \u0418\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u043e\u0441\u0442\u044c: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0441\u043f\u0438\u0441\u043a\u0438 \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438. \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0440\u0443\u0433\u043b\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a, \u0430 \u0441\u043f\u0438\u0441\u043a\u0438 - \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u044b\u0445 \u0441\u043a\u043e\u0431\u043e\u043a. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435: \u041a\u043e\u0440\u0442\u0435\u0436\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043d\u0435\u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a \u043a\u043e\u043e\u0440\u0434\u0438\u043d\u0430\u0442\u044b, \u0438\u043c\u0435\u043d\u0430, \u0434\u0430\u0442\u044b, \u0430 \u0441\u043f\u0438\u0441\u043a\u0438 \u043e\u0431\u044b\u0447\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u0437\u043c\u0435\u043d\u044f\u0435\u043c\u044b\u043c\u0438 \u043d\u0430\u0431\u043e\u0440\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445. \u0420\u0430\u0437\u043c\u0435\u0440: \u041a\u043e\u0440\u0442\u0435\u0436\u0438, \u043a\u0430\u043a \u043f\u0440\u0430\u0432\u0438\u043b\u043e, \u0437\u0430\u043d\u0438\u043c\u0430\u044e\u0442 \u043c\u0435\u043d\u044c\u0448\u0435 \u043f\u0430\u043c\u044f\u0442\u0438, \u0447\u0435\u043c \u0441\u043f\u0438\u0441\u043a\u0438, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043e\u043d\u0438 \u043d\u0435 \u043d\u0443\u0436\u0434\u0430\u044e\u0442\u0441\u044f \u0432 \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0438 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u0442\u043e\u043c, \u043a\u0430\u043a \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u0441\u0432\u043e\u0438 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f, \u0447\u0442\u043e \u0441\u043e\u043a\u0440\u0430\u0449\u0430\u0435\u0442 \u043d\u0430\u043a\u043b\u0430\u0434\u043d\u044b\u0435 \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u043f\u0430\u043c\u044f\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u0438 \u0435\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f: # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 my_tuple = (1, 2, 3, 4, 5) # \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0435 \u043a \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u0443 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 \u043f\u043e \u0438\u043d\u0434\u0435\u043a\u0441\u0443 print(my_tuple[0]) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 1 # \u043f\u0435\u0440\u0435\u0431\u043e\u0440 \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u043e\u0432 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 for element in my_tuple: print(element) # \u043f\u043e\u043f\u044b\u0442\u043a\u0430 \u0438\u0437\u043c\u0435\u043d\u0438\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442 \u043a\u043e\u0440\u0442\u0435\u0436\u0430 my_tuple[0] = 6 # \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043e\u0448\u0438\u0431\u043a\u0443 TypeError","title":"Answer:"},{"location":"Python/Base/Interview/#question-06","text":"\u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0446\u0438\u043a\u043b\u043e\u0432 \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python?","title":"Question 06"},{"location":"Python/Base/Interview/#answer_5","text":"Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0434\u0432\u0430 \u0432\u0438\u0434\u0430 \u0446\u0438\u043a\u043b\u043e\u0432: \u0426\u0438\u043a\u043b for: \u0426\u0438\u043a\u043b for \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0435\u0440\u0435\u0431\u0438\u0440\u0430\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u0441\u0442\u0440\u043e\u043a\u0438, \u0441\u043f\u0438\u0441\u043a\u0438, \u043a\u043e\u0440\u0442\u0435\u0436\u0438 \u0438 \u0434\u0440\u0443\u0433\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u044b, \u0432 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0435\u0441\u0442\u044c \u044d\u043b\u0435\u043c\u0435\u043d\u0442\u044b. \u041f\u0440\u0438\u043c\u0435\u0440: fruits = [\"apple\", \"banana\", \"cherry\"] for fruit in fruits: print(fruit) \u0426\u0438\u043a\u043b while: \u0426\u0438\u043a\u043b while \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0434\u043e \u0442\u0435\u0445 \u043f\u043e\u0440, \u043f\u043e\u043a\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u0438\u0441\u0442\u0438\u043d\u043d\u043e. \u041f\u0440\u0438\u043c\u0435\u0440: i = 1 while i < 6: print(i) i += 1 \u041e\u0431\u0430 \u0446\u0438\u043a\u043b\u0430 \u0438\u043c\u0435\u044e\u0442 \u0441\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 for \u0438 while, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0432 \u043a\u0430\u0436\u0434\u043e\u0439 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u0446\u0438\u043a\u043b\u0430. \u0420\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u043d\u0438\u043c\u0438 \u0437\u0430\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u0446\u0438\u043a\u043b for \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u0438\u0437\u0432\u0435\u0441\u0442\u0435\u043d \u0440\u0430\u0437\u043c\u0435\u0440 \u043f\u043e\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u043d\u043e\u0441\u0442\u0438, \u0430 \u0446\u0438\u043a\u043b while - \u043a\u043e\u0433\u0434\u0430 \u0443\u0441\u043b\u043e\u0432\u0438\u0435 \u043f\u0440\u043e\u0434\u043e\u043b\u0436\u0435\u043d\u0438\u044f \u0446\u0438\u043a\u043b\u0430 \u0437\u0430\u0432\u0438\u0441\u0438\u0442 \u043e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 \u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f.","title":"Answer:"},{"location":"Python/Base/Interview/#question-07","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python? \u041a\u0430\u043a \u043e\u043d\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f?","title":"Question 07"},{"location":"Python/Base/Interview/#answer_6","text":"\u0424\u0443\u043d\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d \u0432 \u043b\u044e\u0431\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0447\u0442\u043e\u0431\u044b \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043d\u0430\u0431\u043e\u0440 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439. \u041e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 def, \u0437\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0438 \u0434\u0432\u043e\u0435\u0442\u043e\u0447\u0438\u0435. \u0417\u0430\u0442\u0435\u043c \u0438\u0434\u0435\u0442 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0443\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u041f\u0440\u0438\u043c\u0435\u0440 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u044b\u0432\u043e\u0434\u0438\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435: def say_hello(name): print(\"Hello, \" + name) \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 say_hello - \u044d\u0442\u043e \u0438\u043c\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0438, name - \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. \u0414\u043b\u044f \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0443\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0435\u0435 \u0438\u043c\u044f, \u0430 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u0443\u043a\u0430\u0437\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u0435\u0441\u043b\u0438 \u043e\u043d\u0438 \u0435\u0441\u0442\u044c. \u041f\u0440\u0438\u043c\u0435\u0440 \u0432\u044b\u0437\u043e\u0432\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 say_hello: say_hello(\"John\") \u042d\u0442\u0430 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \"Hello, John\". \u0422\u0430\u043a\u0436\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 return . \u041f\u0440\u0438\u043c\u0435\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443: def add_numbers(a, b): return a + b \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f add_numbers \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0434\u0432\u0430 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430 a \u0438 b \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0438\u0445 \u0441\u0443\u043c\u043c\u0443. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: result = add_numbers(2, 3) print(result) \u0412 \u044d\u0442\u043e\u043c \u043f\u0440\u0438\u043c\u0435\u0440\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u044f add_numbers \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0441 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u0430\u043c\u0438 2 \u0438 3, \u0438 \u0435\u0435 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u043e\u0435 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 (5) \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442\u0441\u044f \u0432 \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0439 result, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0437\u0430\u0442\u0435\u043c \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u043d\u0430 \u044d\u043a\u0440\u0430\u043d \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 print().","title":"Answer:"},{"location":"Python/Base/Interview/#question-08","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u043e\u0434\u0443\u043b\u044c \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0432\u044b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b\u0438?","title":"Question 08"},{"location":"Python/Base/Interview/#answer_7","text":"\u041c\u043e\u0434\u0443\u043b\u044c \u0432 Python - \u044d\u0442\u043e \u0444\u0430\u0439\u043b, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u0439 \u043d\u0430\u0431\u043e\u0440 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u043d\u0441\u0442\u0430\u043d\u0442 \u0438 \u0434\u0440\u0443\u0433\u0438\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435. \u041c\u043e\u0434\u0443\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430, \u0447\u0442\u043e\u0431\u044b \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0435\u0433\u043e \u0431\u043e\u043b\u0435\u0435 \u043f\u043e\u043d\u044f\u0442\u043d\u044b\u043c \u0438 \u0443\u0434\u043e\u0431\u043d\u044b\u043c \u0434\u043b\u044f \u043f\u043e\u0432\u0442\u043e\u0440\u043d\u043e\u0433\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f. \u0412 Python \u0443\u0436\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u044b \u043c\u043d\u043e\u0433\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u0438, \u043d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, math, random, datetime, re \u0438 \u0434\u0440\u0443\u0433\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442 \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043d\u0435 \u0432\u0445\u043e\u0434\u044f\u0442 \u0432 \u0441\u0442\u0430\u043d\u0434\u0430\u0440\u0442\u043d\u0443\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Python. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442 \u043c\u043d\u043e\u0436\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u043e\u0440\u043e\u043d\u043d\u0438\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0438\u0442\u044c \u0447\u0435\u0440\u0435\u0437 \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440 \u043f\u0430\u043a\u0435\u0442\u043e\u0432 pip. \u0414\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f \u0432 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0435 \u043d\u0443\u0436\u043d\u043e \u0435\u0433\u043e \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 import. \u041d\u0430\u043f\u0440\u0438\u043c\u0435\u0440, \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u043c\u043e\u0434\u0443\u043b\u044f math, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u0442 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438, \u043c\u043e\u0436\u043d\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u043a\u043e\u0434: import math print(math.sqrt(9)) # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d 3.0 \u042d\u0442\u043e\u0442 \u043a\u043e\u0434 \u0438\u043c\u043f\u043e\u0440\u0442\u0438\u0440\u0443\u0435\u0442 \u043c\u043e\u0434\u0443\u043b\u044c math \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u0444\u0443\u043d\u043a\u0446\u0438\u044e sqrt() \u0438\u0437 \u044d\u0442\u043e\u0433\u043e \u043c\u043e\u0434\u0443\u043b\u044f \u0434\u043b\u044f \u043d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u044f \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u043a\u043e\u0440\u043d\u044f \u0438\u0437 \u0447\u0438\u0441\u043b\u0430 9. \u041a\u0440\u043e\u043c\u0435 \u043e\u0431\u0449\u0435\u043f\u0440\u0438\u043d\u044f\u0442\u044b\u0445 \u043c\u043e\u0434\u0443\u043b\u0435\u0439, \u0432 \u0437\u0430\u0432\u0438\u0441\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u0442 \u0437\u0430\u0434\u0430\u0447\u0438, \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u043c\u043e\u0433\u0443\u0442 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0438 \u0441\u043e\u0431\u0441\u0442\u0432\u0435\u043d\u043d\u044b\u0435 \u043c\u043e\u0434\u0443\u043b\u0438 \u0434\u043b\u044f \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u0430\u0446\u0438\u0438 \u043a\u043e\u0434\u0430.","title":"Answer:"},{"location":"Python/Base/Interview/#question-09","text":"\u041a\u0430\u043a\u0438\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043c\u043e\u0436\u043d\u043e \u043f\u0435\u0440\u0435\u0434\u0430\u0442\u044c \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 Python?","title":"Question 09"},{"location":"Python/Base/Interview/#answer_8","text":"\u0412 Python \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432: \u041f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u044d\u0442\u043e \u043e\u0431\u044b\u0447\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0432 \u043f\u043e\u0440\u044f\u0434\u043a\u0435, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c \u0432 \u0435\u0435 \u0441\u0438\u0433\u043d\u0430\u0442\u0443\u0440\u0435. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043b\u044e\u0431\u043e\u0433\u043e \u0442\u0438\u043f\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440: def sum(a, b): return a + b print(sum(2, 3)) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 5 \u0418\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0435 \u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u043f\u043e \u0438\u043c\u0435\u043d\u0438. \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e, \u0438 \u0435\u0441\u043b\u0438 \u0438\u0445 \u043d\u0435 \u043f\u0435\u0440\u0435\u0434\u0430\u044e\u0442 \u044f\u0432\u043d\u043e, \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0431\u0443\u0434\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u043f\u043e \u0443\u043c\u043e\u043b\u0447\u0430\u043d\u0438\u044e. \u041f\u0440\u0438\u043c\u0435\u0440: def greet(name, greeting='Hello'): print(greeting + ', ' + name) greet('Alice') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'Hello, Alice' greet('Bob', 'Hi') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'Hi, Bob' \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u043e \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439. \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441\u043e \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u043e\u0439 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440: def sum(*args): total = 0 for arg in args: total += arg return total print(sum(1, 2, 3, 4, 5)) # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 15 \u0410\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u0441 \u0434\u0432\u0443\u043c\u044f \u0437\u0432\u0435\u0437\u0434\u043e\u0447\u043a\u0430\u043c\u0438: \u044d\u0442\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043c\u043e\u0433\u0443\u0442 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u043c\u0435\u043d\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041e\u043d\u0438 \u0442\u0430\u043a\u0436\u0435 \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u043c\u0438 \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432. \u041f\u0440\u0438\u043c\u0435\u0440: def print_info(**kwargs): for key, value in kwargs.items(): print(key + ': ' + str(value)) print_info(name='Alice', age=25, city='New York') # \u0432\u044b\u0432\u043e\u0434\u0438\u0442 'name: Alice', 'age: 25', 'city: New York' \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u0432 Python \u0435\u0441\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0442\u044c \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u044b \u043a\u0430\u043a \u043f\u043e\u0437\u0438\u0446\u0438\u043e\u043d\u043d\u044b\u0435, \u0442\u0430\u043a \u0438 \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0447\u0442\u043e \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u043e\u043b\u0435\u0435 \u0433\u0438\u0431\u043a\u0438\u0439 \u043f\u043e\u0434\u0445\u043e\u0434 \u043a \u0432\u044b\u0437\u043e\u0432\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0439.","title":"Answer:"},{"location":"Python/Base/Interview/#question-10","text":"\u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python?","title":"Question 10"},{"location":"Python/Base/Interview/#answer_9","text":"Lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044f \u0432 Python - \u044d\u0442\u043e \u0430\u043d\u043e\u043d\u0438\u043c\u043d\u0430\u044f (\u0431\u0435\u0437\u044b\u043c\u044f\u043d\u043d\u0430\u044f) \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0430 \u0432 \u043e\u0434\u043d\u043e\u0439 \u0441\u0442\u0440\u043e\u043a\u0435 \u043a\u043e\u0434\u0430. \u041e\u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f, \u043a\u043e\u0433\u0434\u0430 \u043d\u0443\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e \u0434\u043b\u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f \u0432\u043d\u0443\u0442\u0440\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043b\u0438 \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u044f, \u043d\u043e \u043d\u0435\u0442 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e\u0441\u0442\u0438 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0442\u044c \u0435\u0435 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e. \u0421\u0438\u043d\u0442\u0430\u043a\u0441\u0438\u0441 lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432\u044b\u0433\u043b\u044f\u0434\u0438\u0442 \u0442\u0430\u043a: lambda arguments: expression \u0433\u0434\u0435 arguments - \u044d\u0442\u043e \u0441\u043f\u0438\u0441\u043e\u043a \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0447\u0435\u0440\u0435\u0437 \u0437\u0430\u043f\u044f\u0442\u0443\u044e, \u0430 expression - \u044d\u0442\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u043e \u043f\u0440\u0438 \u0432\u044b\u0437\u043e\u0432\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438. Lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432, \u043d\u043e \u0442\u043e\u043b\u044c\u043a\u043e \u043e\u0434\u043d\u043e \u0432\u044b\u0440\u0430\u0436\u0435\u043d\u0438\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u044f lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438: # \u0421\u043e\u0437\u0434\u0430\u0435\u043c lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044e, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u0432\u0430\u0434\u0440\u0430\u0442 \u0447\u0438\u0441\u043b\u0430 square = lambda x: x**2 # \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u043c lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u044e result = square(5) # \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: 25 \u041e\u0431\u044b\u0447\u043d\u043e lambda-\u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u0430\u0440\u0433\u0443\u043c\u0435\u043d\u0442\u043e\u0432 \u0434\u043b\u044f \u0444\u0443\u043d\u043a\u0446\u0438\u0439 \u0432\u044b\u0441\u0448\u0435\u0433\u043e \u043f\u043e\u0440\u044f\u0434\u043a\u0430, \u0442\u0430\u043a\u0438\u0445 \u043a\u0430\u043a map() , filter() , reduce() . \u041e\u043d\u0438 \u043c\u043e\u0433\u0443\u0442 \u0442\u0430\u043a\u0436\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0432\u043c\u0435\u0441\u0442\u043e \u0438\u043c\u0435\u043d\u043e\u0432\u0430\u043d\u043d\u044b\u0445 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0435\u0441\u043b\u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u044f \u043d\u0435 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u0432 \u0434\u0440\u0443\u0433\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u0432 \u043a\u043e\u0434\u0435.","title":"Answer:"},{"location":"Python/Base/Interview/#question-11","text":"\u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u041e\u041e\u041f \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 Python?","title":"Question 11"},{"location":"Python/Base/Interview/#answer_10","text":"Python \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u0435\u0442 \u0432\u0441\u0435 \u043e\u0441\u043d\u043e\u0432\u043d\u044b\u0435 \u043f\u0440\u0438\u043d\u0446\u0438\u043f\u044b \u041e\u041e\u041f (\u043e\u0431\u044a\u0435\u043a\u0442\u043d\u043e-\u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f), \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435, \u043f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c, \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044e, \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044e. \u041d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 - \u044d\u0442\u043e \u043c\u0435\u0445\u0430\u043d\u0438\u0437\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u043c\u0443 \u043a\u043b\u0430\u0441\u0441\u0443 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u044c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430. \u041a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043d\u0430\u0441\u043b\u0435\u0434\u0443\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u043e\u043c, \u0430 \u043a\u043b\u0430\u0441\u0441, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0435\u0440\u0435\u0434\u0430\u0435\u0442 \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b, \u043d\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u043c \u043a\u043b\u0430\u0441\u0441\u043e\u043c \u0438\u043b\u0438 \u0441\u0443\u043f\u0435\u0440\u043a\u043b\u0430\u0441\u0441\u043e\u043c. \u0412 Python \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0435\u0442\u0441\u044f \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043b\u044e\u0447\u0435\u0432\u043e\u0433\u043e \u0441\u043b\u043e\u0432\u0430 class , \u0430 \u0437\u0430\u0442\u0435\u043c \u0443\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442\u0441\u044f \u0431\u0430\u0437\u043e\u0432\u044b\u0439 \u043a\u043b\u0430\u0441\u0441 \u0432 \u0441\u043a\u043e\u0431\u043a\u0430\u0445 \u043f\u043e\u0441\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430. \u041f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c - \u044d\u0442\u043e \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438\u043c\u0435\u0442\u044c \u043e\u0434\u0438\u043d\u0430\u043a\u043e\u0432\u043e\u0435 \u0438\u043c\u044f \u043c\u0435\u0442\u043e\u0434\u0430 \u0438\u043b\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430, \u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0440\u0430\u0437\u043d\u044b\u0435 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u044f. \u041f\u043e\u043b\u0438\u043c\u043e\u0440\u0444\u0438\u0437\u043c \u0432 Python \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u043f\u0435\u0440\u0435\u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u0432 \u0431\u0430\u0437\u043e\u0432\u043e\u0433\u043e \u043a\u043b\u0430\u0441\u0441\u0430 \u0432 \u0435\u0433\u043e \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u0445. \u0418\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f - \u044d\u0442\u043e \u043f\u0440\u0438\u043d\u0446\u0438\u043f, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043e\u0431\u044a\u0435\u0434\u0438\u043d\u0438\u0442\u044c \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u043c\u0435\u0442\u043e\u0434\u044b \u0432\u043d\u0443\u0442\u0440\u0438 \u043a\u043b\u0430\u0441\u0441\u0430 \u0438 \u0441\u043a\u0440\u044b\u0442\u044c \u0438\u0445 \u043e\u0442 \u0434\u0440\u0443\u0433\u0438\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432 \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0439, \u0447\u0442\u043e\u0431\u044b \u043f\u0440\u0435\u0434\u043e\u0442\u0432\u0440\u0430\u0442\u0438\u0442\u044c \u043d\u0435\u0441\u0430\u043d\u043a\u0446\u0438\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0439 \u0434\u043e\u0441\u0442\u0443\u043f. \u0412 Python \u0438\u043d\u043a\u0430\u043f\u0441\u0443\u043b\u044f\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0432\u043e\u0439\u043d\u043e\u0433\u043e \u043f\u043e\u0434\u0447\u0435\u0440\u043a\u0438\u0432\u0430\u043d\u0438\u044f \u0432 \u043d\u0430\u0447\u0430\u043b\u0435 \u0438\u043c\u0435\u043d\u0438 \u0430\u0442\u0440\u0438\u0431\u0443\u0442\u0430 \u0438\u043b\u0438 \u043c\u0435\u0442\u043e\u0434\u0430. \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f - \u044d\u0442\u043e \u043f\u0440\u043e\u0446\u0435\u0441\u0441 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u043e\u0441\u043d\u043e\u0432\u043d\u043e\u0439 \u0441\u0443\u0442\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0438 \u0438\u0433\u043d\u043e\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0434\u0435\u0442\u0430\u043b\u0435\u0439 \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438. \u0412 Python \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0446\u0438\u044f \u0434\u043e\u0441\u0442\u0438\u0433\u0430\u0435\u0442\u0441\u044f \u043f\u0443\u0442\u0435\u043c \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u0430\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0445 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u044e\u0442 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441, \u043d\u043e \u043d\u0435 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u044e\u0442 \u0435\u0433\u043e. \u0410\u0431\u0441\u0442\u0440\u0430\u043a\u0442\u043d\u044b\u0435 \u043a\u043b\u0430\u0441\u0441\u044b \u043c\u043e\u0433\u0443\u0442 \u0431\u044b\u0442\u044c \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u044b \u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0432 \u043f\u043e\u0434\u043a\u043b\u0430\u0441\u0441\u0430\u0445.","title":"Answer:"},{"location":"Python/Base/Interview/#question-12","text":"\u0412 \u0447\u0435\u043c \u0440\u0430\u0437\u043d\u0438\u0446\u0430 \u043c\u0435\u0436\u0434\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432 Python? \u0418 \u0447\u0435\u043c \u0438\u0445 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e?","title":"Question 12"},{"location":"Python/Base/Interview/#answer_11","text":"\u0412 Python \u043c\u0435\u0442\u043e\u0434 - \u044d\u0442\u043e \u0444\u0443\u043d\u043a\u0446\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443. \u0424\u0443\u043d\u043a\u0446\u0438\u044f \u0436\u0435 - \u044d\u0442\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u0439 \u0431\u043b\u043e\u043a \u043a\u043e\u0434\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0437\u0432\u0430\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u043c\u0435\u0441\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041c\u0435\u0442\u043e\u0434\u044b \u0438 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0438\u043c\u0435\u044e\u0442 \u0441\u0445\u043e\u0434\u0441\u0442\u0432\u043e \u0432 \u0442\u043e\u043c, \u0447\u0442\u043e \u043e\u043d\u0438 \u043e\u0431\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u0443\u044e \u0437\u0430\u0434\u0430\u0447\u0443. \u041e\u0434\u043d\u0430\u043a\u043e, \u043c\u0435\u0442\u043e\u0434\u044b \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u044b \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c \u0438 \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0441 \u0438\u0445 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0435\u043c, \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0439 \u0441\u0432\u044f\u0437\u0438 \u0438 \u043d\u0435 \u0437\u0430\u0432\u0438\u0441\u044f\u0442 \u043e\u0442 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u044f \u043e\u0431\u044a\u0435\u043a\u0442\u0430. \u041a\u0440\u043e\u043c\u0435 \u0442\u043e\u0433\u043e, \u043c\u0435\u0442\u043e\u0434\u044b \u043c\u043e\u0433\u0443\u0442 \u0438\u043c\u0435\u0442\u044c \u0434\u043e\u0441\u0442\u0443\u043f \u043a \u0441\u043a\u0440\u044b\u0442\u044b\u043c \u0441\u0432\u043e\u0439\u0441\u0442\u0432\u0430\u043c \u043e\u0431\u044a\u0435\u043a\u0442\u0430 (\u0442\u0430\u043a\u0438\u043c \u043a\u0430\u043a self.__private_variable), \u0442\u043e\u0433\u0434\u0430 \u043a\u0430\u043a \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u043d\u0435 \u0438\u043c\u0435\u044e\u0442 \u0442\u0430\u043a\u043e\u0433\u043e \u0434\u043e\u0441\u0442\u0443\u043f\u0430. \u041f\u0440\u0438\u043c\u0435\u0440 \u0440\u0430\u0437\u043d\u0438\u0446\u044b \u043c\u0435\u0436\u0434\u0443 \u0444\u0443\u043d\u043a\u0446\u0438\u0435\u0439 \u0438 \u043c\u0435\u0442\u043e\u0434\u043e\u043c \u0432 Python: class MyClass: def __init__(self, value): self.value = value def my_method(self): print(f'The value is {self.value}') def my_function(value): print(f'The value is {value}') # \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043a\u043b\u0430\u0441\u0441\u0430 my_object = MyClass(10) # \u0432\u044b\u0437\u043e\u0432 \u043c\u0435\u0442\u043e\u0434\u0430 \u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 my_object.my_method() # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 'The value is 10' # \u0432\u044b\u0437\u043e\u0432 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 my_function(10) # \u0432\u044b\u0432\u0435\u0434\u0435\u0442 'The value is 10' \u0417\u0434\u0435\u0441\u044c my_method() \u044f\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u043c\u0435\u0442\u043e\u0434\u043e\u043c, \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u043c \u0432 \u043a\u043b\u0430\u0441\u0441\u0435 MyClass , \u0438 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u043d\u044b\u043c \u043a \u043e\u0431\u044a\u0435\u043a\u0442\u0443 my_object . \u0424\u0443\u043d\u043a\u0446\u0438\u044f my_function() \u043d\u0435 \u043f\u0440\u0438\u0432\u044f\u0437\u0430\u043d\u0430 \u043d\u0438 \u043a \u043a\u0430\u043a\u043e\u043c\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u0443 \u0438 \u043c\u043e\u0436\u0435\u0442 \u0431\u044b\u0442\u044c \u0432\u044b\u0437\u0432\u0430\u043d\u0430 \u0438\u0437 \u043b\u044e\u0431\u043e\u0433\u043e \u043c\u0435\u0441\u0442\u0430 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043a\u043b\u0430\u0441\u0441 \u0432 Python? \u041a\u0430\u043a \u043e\u043d \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u044f\u0435\u0442\u0441\u044f \u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043d\u0430\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 Python? \u041a\u0430\u043a \u043e\u043d\u043e \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442? \u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0439 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Python? \u041a\u0430\u043a \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0442\u044c \u0438\u0441\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u043c\u043e\u0434\u0443\u043b\u044c unittest \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u043f\u0440\u0435\u0438\u043c\u0443\u0449\u0435\u0441\u0442\u0432\u0430 \u0438\u043c\u0435\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u043e\u0434\u0443\u043b\u044f unittest \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0434\u0435\u043a\u043e\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0432\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u044b\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0438 \u0432 Python \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u044e\u0442 \u0433\u0435\u043d\u0435\u0440\u0430\u0442\u043e\u0440\u044b \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0432\u0438\u0434\u044b \u0438\u043c\u043f\u043e\u0440\u0442\u0430 \u043c\u043e\u0434\u0443\u043b\u0435\u0439 \u0432 Python \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 virtualenv \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c virtualenv \u0432 Python? \u0427\u0442\u043e \u0442\u0430\u043a\u043e\u0435 GIL (Global Interpreter Lock) \u0432 Python? \u041a\u0430\u043a \u0440\u0430\u0431\u043e\u0442\u0430\u0435\u0442 GIL \u0432 Python? \u041a\u0430\u043a\u0438\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 \u0434\u043b\u044f \u043d\u0430\u0443\u0447\u043d\u044b\u0445 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0439 \u0432\u044b \u0437\u043d\u0430\u0435\u0442\u0435 \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 NumPy \u0432 Python? \u041a\u0430\u043a \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 Pandas \u0432 Python?","title":"Answer:"},{"location":"Python/Base/class/","text":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b) \u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u0440\u0438\u043c\u0435\u0440 1 - list Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # [] \u041f\u0440\u0438\u043c\u0435\u0440 2 - int Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes() Class class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b)"},{"location":"Python/Base/class/#objects","text":"\u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445","title":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b)"},{"location":"Python/Base/class/#1-list","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # []","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1 - list"},{"location":"Python/Base/class/#2-int","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes()","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2 - int"},{"location":"Python/Base/class/#class","text":"class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Class"},{"location":"Python/Framework/fastapi/","text":"from fastapi import FastAPI, HTTPException from faker import Faker from datetime import datetime import random fake = Faker() cities = ['Michaelburgh', 'Christopherville', 'Stephaniechester', 'East Robert', 'East Valerie', 'Lake Jamesfurt', 'Markbury', 'West Alejandro', 'Russellfort', 'Masonport', 'Lake Anthony', 'Lake Davidville', 'Port Cheyenne', 'Michaelside', 'New Lori', 'Dustinville', 'Peterchester', 'Christopherborough', 'North Melissaburgh'] app = FastAPI( title=\"Password Generator API\", version=\"version 1.0.45\", description=\"This API provide random passwords\", terms_of_service=\"https://example.com/terms/\", contact={\"email\": \"salavat@nigmatullin.net\"}, license_info={\"name\": \"MIT License\", \"url\": \"https://example.com/license\"}, ) @app.get(\"/home\") async def home_page(): firstname = fake.first_name() lastname = fake.last_name() email = fake.email() data = {\"user\": f\"{firstname} {lastname}\", \"email\": f\"{email}\"} return data @app.get(\"/pswd\") async def get_password(): password = fake.password() data = {\"password\": f\"{password}\"} return data @app.get(\"/time\") async def get_current_time(): current_time = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\") data = {\"current_time\": f\"{current_time}\"} return data @app.get(\"/city/rand\") async def get_random_city(): city = random.choice(cities) number = cities.index(city) data = {\"city\": city, \"city_id\": number} return data @app.get(\"/city/{city_id}\") async def get_city_by_id(city_id: int): if city_id < 0 or city_id > len(cities): raise HTTPException(status_code=404, detail=f\"City not found! Index {city_id} is out of range!\") else: data = {\"city\": f\"{cities[city_id]}\"} return data @app.get(\"/city\") async def get_city_name(): data = {\"city\": f\"{cities}\"} return data @app.post(\"/city\") async def add_city(city: str): cities.append(city) city_index = cities.index(city) data = {\"city\": cities[city_index], \"city_id\": city_index} return data","title":"FastAPI"},{"location":"Python/Libs/Faker/","text":"Faker How to use The Faker library in Python is a tool for generating fake data such as names, addresses, phone numbers, and more. Here are some steps to use Faker library in Python: Install the Faker library by running the following command in your terminal or command prompt: pip install Faker Import the Faker library at the beginning of your Python code: from faker import Faker Create an instance of the Faker class: fake = Faker() Use the Faker instance to generate fake data. For example, to generate a fake name: name = fake.name() Simple example from faker import Faker fake = Faker() name = fake.name() email = fake.email() city = fake.city() print(f\"Hello {name}, your email is {email} and you live in {city}\") Result: Hello John Cohen, your email is michael82@example.com and you live in Lanemouth Hello William Ellis, your email is lpollard@example.com and you live in South Connie Hello Garrett Jones, your email is smithryan@example.com and you live in Morrowton Search available fake keywords: To search for available Faker methods related to a specific keyword, define a function that iterates through the available attributes of the Faker instance and prints the ones that contain the keyword: from faker import Faker fake = Faker() def search_fake(keyword): for attribute in dir(fake): if keyword in attribute: print(attribute) search = \"country\" search_fake(search) Popular examples: from faker import Faker fake = Faker() print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA*","title":"Faker"},{"location":"Python/Libs/Faker/#faker","text":"","title":"Faker"},{"location":"Python/Libs/Faker/#how-to-use","text":"The Faker library in Python is a tool for generating fake data such as names, addresses, phone numbers, and more. Here are some steps to use Faker library in Python: Install the Faker library by running the following command in your terminal or command prompt: pip install Faker Import the Faker library at the beginning of your Python code: from faker import Faker Create an instance of the Faker class: fake = Faker() Use the Faker instance to generate fake data. For example, to generate a fake name: name = fake.name()","title":"How to use"},{"location":"Python/Libs/Faker/#simple-example","text":"from faker import Faker fake = Faker() name = fake.name() email = fake.email() city = fake.city() print(f\"Hello {name}, your email is {email} and you live in {city}\") Result: Hello John Cohen, your email is michael82@example.com and you live in Lanemouth Hello William Ellis, your email is lpollard@example.com and you live in South Connie Hello Garrett Jones, your email is smithryan@example.com and you live in Morrowton","title":"Simple example"},{"location":"Python/Libs/Faker/#search-available-fake-keywords","text":"To search for available Faker methods related to a specific keyword, define a function that iterates through the available attributes of the Faker instance and prints the ones that contain the keyword: from faker import Faker fake = Faker() def search_fake(keyword): for attribute in dir(fake): if keyword in attribute: print(attribute) search = \"country\" search_fake(search)","title":"Search available fake keywords:"},{"location":"Python/Libs/Faker/#popular-examples","text":"from faker import Faker fake = Faker() print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA*","title":"Popular examples:"},{"location":"Python/Libs/Faker_old/","text":"Python Library: Faker Faker provide you fake data for test project. Install and check Simple Example Search available Parameters Popular parameters Example of using Faker Install and check PyPi Link pip install Faker pip list Package Version ------------------ ------- Faker 18.3.0 Simple Example from faker import Faker fake = Faker() name = fake.name() country = fake.country() print(f\"{name} from {country}!\") Daniel Foster from Madagascar! Search available Parameters from faker import Faker fake = Faker() keyword = \"credit\" # What are you looking for? parameters = dir(fake) for element in parameters: if keyword in element: print(element) credit_card_expire credit_card_full credit_card_number credit_card_provider credit_card_security_code from faker import Faker fake = Faker() credit_card = fake.credit_card_full() print(credit_card) Mastercard Brenda Johnson 2681694391010925 11/29 CVV: 925 Popular parameters from faker import Faker fake = Faker() print(fake.chrome()) # Mozilla/5.0 (Linux; Android 4.2) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/26.0.898.0 Safari/534.1 print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA* Example of using Faker from faker import Faker fake = Faker() name = fake.first_name_male() time = fake.time() month = fake.month_name() delivery_date = fake.future_datetime() domain = fake.domain_name() person = fake.name() email = fake.free_email() phone = fake.phone_number() msg = f\"Mr. {name}, \\n\" \\ f\"Your package has been shipped - ETA: {time} \\n\" \\ f\"on 18th {month} at your residence. \\n\" \\ f\"Estimated delivery date is {delivery_date}\\n\" \\ f\"To track your parcel, visit www.{domain}.\\n\" \\ f\"\\n\" \\ f\"Best regards,\\n\" \\ f\"{person}\\n\" \\ f\"Email:\\t{email}\\n\" \\ f\"Phone:\\t{phone}\" print(msg) Mr. Brian, Your package has been shipped - ETA: 14:05:44 on 18th July at your residence. Estimated delivery date is 2023-04-08 15:29:43 To track your parcel, visit www.poole.com. Best regards, Thomas Jones Email: jgallegos@yahoo.com Phone: +1-285-904-4881","title":"Python Library: Faker"},{"location":"Python/Libs/Faker_old/#python-library-faker","text":"Faker provide you fake data for test project. Install and check Simple Example Search available Parameters Popular parameters Example of using Faker","title":"Python Library: Faker"},{"location":"Python/Libs/Faker_old/#install-and-check","text":"PyPi Link pip install Faker pip list Package Version ------------------ ------- Faker 18.3.0","title":"Install and check"},{"location":"Python/Libs/Faker_old/#simple-example","text":"from faker import Faker fake = Faker() name = fake.name() country = fake.country() print(f\"{name} from {country}!\") Daniel Foster from Madagascar!","title":"Simple Example"},{"location":"Python/Libs/Faker_old/#search-available-parameters","text":"from faker import Faker fake = Faker() keyword = \"credit\" # What are you looking for? parameters = dir(fake) for element in parameters: if keyword in element: print(element) credit_card_expire credit_card_full credit_card_number credit_card_provider credit_card_security_code from faker import Faker fake = Faker() credit_card = fake.credit_card_full() print(credit_card) Mastercard Brenda Johnson 2681694391010925 11/29 CVV: 925","title":"Search available Parameters"},{"location":"Python/Libs/Faker_old/#popular-parameters","text":"from faker import Faker fake = Faker() print(fake.chrome()) # Mozilla/5.0 (Linux; Android 4.2) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/26.0.898.0 Safari/534.1 print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA*","title":"Popular parameters"},{"location":"Python/Libs/Faker_old/#example-of-using-faker","text":"from faker import Faker fake = Faker() name = fake.first_name_male() time = fake.time() month = fake.month_name() delivery_date = fake.future_datetime() domain = fake.domain_name() person = fake.name() email = fake.free_email() phone = fake.phone_number() msg = f\"Mr. {name}, \\n\" \\ f\"Your package has been shipped - ETA: {time} \\n\" \\ f\"on 18th {month} at your residence. \\n\" \\ f\"Estimated delivery date is {delivery_date}\\n\" \\ f\"To track your parcel, visit www.{domain}.\\n\" \\ f\"\\n\" \\ f\"Best regards,\\n\" \\ f\"{person}\\n\" \\ f\"Email:\\t{email}\\n\" \\ f\"Phone:\\t{phone}\" print(msg) Mr. Brian, Your package has been shipped - ETA: 14:05:44 on 18th July at your residence. Estimated delivery date is 2023-04-08 15:29:43 To track your parcel, visit www.poole.com. Best regards, Thomas Jones Email: jgallegos@yahoo.com Phone: +1-285-904-4881","title":"Example of using Faker"},{"location":"Python/Libs/dotEnv/","text":"Lib DotEnv How to use Create a new file (by default name is .env ) touch .env Open the .env file in a text editor and add the following lines: MySQL_ADDR=\"172.30.0.100\" MySQL_USER=\"root\" MySQL_PSWD=\"Pa$$_123!\" Install the python-dotenv library using the following command: pip install python-dotenv Create a new file called main.py in your project directory and add the following code: from dotenv import dotenv_values env_vars = dotenv_values(\".env\") print(f\"MySQL IP address: {env_vars['MySQL_ADDR']}\") print(f\"MySQL Username: {env_vars['MySQL_USER']}\") print(f\"MySQL Password: {env_vars['MySQL_PSWD']}\") Result: MySQL IP address: 172.30.0.100 MySQL Username: root MySQL Password: Pa$$_123! Environment Variables (Before and After) from dotenv import load_dotenv import os env_before = set(os.environ.keys()) print(f\"Count of variables:\\t{len(env_before)}\") load_dotenv(dotenv_path='.env') env_after = set(os.environ.keys()) env_difference = env_after.difference(env_before) print(f\"Count of variables:\\t{len(env_after)}\") print(f\"New Env Variables:\\t{env_difference}\") Result: Count of variables: 33 Count of variables: 36 New Env Variables: ['MySQL_ADDR', 'MySQL_USER', 'MySQL_PSWD']","title":"DotEnv"},{"location":"Python/Libs/dotEnv/#lib-dotenv","text":"","title":"Lib DotEnv"},{"location":"Python/Libs/dotEnv/#how-to-use","text":"Create a new file (by default name is .env ) touch .env Open the .env file in a text editor and add the following lines: MySQL_ADDR=\"172.30.0.100\" MySQL_USER=\"root\" MySQL_PSWD=\"Pa$$_123!\" Install the python-dotenv library using the following command: pip install python-dotenv Create a new file called main.py in your project directory and add the following code: from dotenv import dotenv_values env_vars = dotenv_values(\".env\") print(f\"MySQL IP address: {env_vars['MySQL_ADDR']}\") print(f\"MySQL Username: {env_vars['MySQL_USER']}\") print(f\"MySQL Password: {env_vars['MySQL_PSWD']}\") Result: MySQL IP address: 172.30.0.100 MySQL Username: root MySQL Password: Pa$$_123!","title":"How to use"},{"location":"Python/Libs/dotEnv/#environment-variables-before-and-after","text":"from dotenv import load_dotenv import os env_before = set(os.environ.keys()) print(f\"Count of variables:\\t{len(env_before)}\") load_dotenv(dotenv_path='.env') env_after = set(os.environ.keys()) env_difference = env_after.difference(env_before) print(f\"Count of variables:\\t{len(env_after)}\") print(f\"New Env Variables:\\t{env_difference}\") Result: Count of variables: 33 Count of variables: 36 New Env Variables: ['MySQL_ADDR', 'MySQL_USER', 'MySQL_PSWD']","title":"Environment Variables (Before and After)"},{"location":"Python/Libs/ComputerVision/01.Read_Image/","text":"Work with pictures 1. Read Image file import cv2 file = \"Images/monkey.jpg\" picture = cv2.imread(filename=file, flags=1) cv2.imshow(winname=\"Original Photo\", mat=picture) cv2.waitKey(delay=0) cv2.imread() (filename=file, flags=1) - cv2.IMREAD_COLOR (filename=file, flags=-1) - cv2.IMREAD_UNCHANGED (filename=file, flags=0) - cv2.IMREAD_GRAYSCALE cv2.waitKey(): (delay=0) - None (delay=5000) - 5 second 2. Get Image Size import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) dimensions = picture.shape height = picture.shape[0] width = picture.shape[1] channels = picture.shape[2] print('Image Dimension : ', dimensions) print('Image Height : ', height) print('Image Width : ', width) print('Number of Channels : ', channels) cv2.waitKey(0) Image Dimension : (430, 600, 3) Image Height : 430 Image Width : 600 Number of Channels : 3 3. Resize Image import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) print(f\"Original:\\t {picture.shape} \\n\" f\"Resized:\\t {pic_Resized.shape}\") cv2.waitKey(0) 4. Crop Image import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Cropped = picture[117:309, 8:593] print(f\"Original:\\t {picture.shape} \\n\" f\"Cropped:\\t {pic_Cropped.shape}\") cv2.imshow(\"Original Picture\", picture) cv2.imshow(\"Image Cropped\", pic_Cropped) cv2.waitKey(0) 5. Save image as new file import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) pic_Cropped = picture[117:309, 8:593] cv2.imwrite(\"Images/CroppedImage.jpg\", pic_Cropped) cv2.imwrite(\"Images/ResizedImage.jpg\", pic_Resized) cv2.waitKey(0)","title":"Work with pictures"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#work-with-pictures","text":"","title":"Work with pictures"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#1-read-image-file","text":"import cv2 file = \"Images/monkey.jpg\" picture = cv2.imread(filename=file, flags=1) cv2.imshow(winname=\"Original Photo\", mat=picture) cv2.waitKey(delay=0) cv2.imread() (filename=file, flags=1) - cv2.IMREAD_COLOR (filename=file, flags=-1) - cv2.IMREAD_UNCHANGED (filename=file, flags=0) - cv2.IMREAD_GRAYSCALE cv2.waitKey(): (delay=0) - None (delay=5000) - 5 second","title":"1. Read Image file"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#2-get-image-size","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) dimensions = picture.shape height = picture.shape[0] width = picture.shape[1] channels = picture.shape[2] print('Image Dimension : ', dimensions) print('Image Height : ', height) print('Image Width : ', width) print('Number of Channels : ', channels) cv2.waitKey(0) Image Dimension : (430, 600, 3) Image Height : 430 Image Width : 600 Number of Channels : 3","title":"2. Get Image Size"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#3-resize-image","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) print(f\"Original:\\t {picture.shape} \\n\" f\"Resized:\\t {pic_Resized.shape}\") cv2.waitKey(0)","title":"3. Resize Image"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#4-crop-image","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Cropped = picture[117:309, 8:593] print(f\"Original:\\t {picture.shape} \\n\" f\"Cropped:\\t {pic_Cropped.shape}\") cv2.imshow(\"Original Picture\", picture) cv2.imshow(\"Image Cropped\", pic_Cropped) cv2.waitKey(0)","title":"4. Crop Image"},{"location":"Python/Libs/ComputerVision/01.Read_Image/#5-save-image-as-new-file","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) pic_Cropped = picture[117:309, 8:593] cv2.imwrite(\"Images/CroppedImage.jpg\", pic_Cropped) cv2.imwrite(\"Images/ResizedImage.jpg\", pic_Resized) cv2.waitKey(0)","title":"5. Save image as new file"},{"location":"Python/Libs/ComputerVision/02.Read_Video/","text":"Work with video VideoCapture : 1. Read the video file import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) while video.isOpened(): status, capture = video.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break video.release() cv2.destroyAllWindows() 2. Read the WebCam import cv2 webcam = cv2.VideoCapture(0) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows() 3. Set parameters import cv2 webcam = cv2.VideoCapture(0) webcam.set(3, 320) webcam.set(4, 240) webcam.set(10, 100) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows() 4. Show Properties: import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) print(\"Get the video file/webcam properties:\") print(f\"{video.get(cv2.CAP_PROP_FRAME_WIDTH)}\\t- Frame Width \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_HEIGHT)}\\t- Frame Height \\n\" f\"{video.get(cv2.CAP_PROP_FPS)}\\t- FPS \\n\" f\"{video.get(cv2.CAP_PROP_POS_MSEC)} \\t- MSEC \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_COUNT)}\\t- Frame Count \\n\" f\"{video.get(cv2.CAP_PROP_BRIGHTNESS)} \\t- Brightness \\n\" f\"{video.get(cv2.CAP_PROP_CONTRAST)} \\t- Contrast \\n\" f\"{video.get(cv2.CAP_PROP_SATURATION)} \\t- Saturation \\n\" f\"{video.get(cv2.CAP_PROP_HUE)} \\t- Hue \\n\" f\"{video.get(cv2.CAP_PROP_GAIN)} \\t- Gain \\n\" f\"{video.get(cv2.CAP_PROP_CONVERT_RGB)} \\t- Convert RGB\") video.release() cv2.destroyAllWindows() Get the video file/webcam properties: 1280.0 - Frame Width 720.0 - Frame Height 25.0 - FPS 0.0 - MSEC 3706.0 - Frame Count 0.0 - Brightness 0.0 - Contrast 0.0 - Saturation 0.0 - Hue 0.0 - Gain 1.0 - Convert RGB","title":"Work with video `VideoCapture`:"},{"location":"Python/Libs/ComputerVision/02.Read_Video/#work-with-video-videocapture","text":"","title":"Work with video VideoCapture:"},{"location":"Python/Libs/ComputerVision/02.Read_Video/#1-read-the-video-file","text":"import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) while video.isOpened(): status, capture = video.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break video.release() cv2.destroyAllWindows()","title":"1. Read the video file"},{"location":"Python/Libs/ComputerVision/02.Read_Video/#2-read-the-webcam","text":"import cv2 webcam = cv2.VideoCapture(0) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows()","title":"2. Read the WebCam"},{"location":"Python/Libs/ComputerVision/02.Read_Video/#3-set-parameters","text":"import cv2 webcam = cv2.VideoCapture(0) webcam.set(3, 320) webcam.set(4, 240) webcam.set(10, 100) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows()","title":"3. Set parameters"},{"location":"Python/Libs/ComputerVision/02.Read_Video/#4-show-properties","text":"import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) print(\"Get the video file/webcam properties:\") print(f\"{video.get(cv2.CAP_PROP_FRAME_WIDTH)}\\t- Frame Width \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_HEIGHT)}\\t- Frame Height \\n\" f\"{video.get(cv2.CAP_PROP_FPS)}\\t- FPS \\n\" f\"{video.get(cv2.CAP_PROP_POS_MSEC)} \\t- MSEC \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_COUNT)}\\t- Frame Count \\n\" f\"{video.get(cv2.CAP_PROP_BRIGHTNESS)} \\t- Brightness \\n\" f\"{video.get(cv2.CAP_PROP_CONTRAST)} \\t- Contrast \\n\" f\"{video.get(cv2.CAP_PROP_SATURATION)} \\t- Saturation \\n\" f\"{video.get(cv2.CAP_PROP_HUE)} \\t- Hue \\n\" f\"{video.get(cv2.CAP_PROP_GAIN)} \\t- Gain \\n\" f\"{video.get(cv2.CAP_PROP_CONVERT_RGB)} \\t- Convert RGB\") video.release() cv2.destroyAllWindows() Get the video file/webcam properties: 1280.0 - Frame Width 720.0 - Frame Height 25.0 - FPS 0.0 - MSEC 3706.0 - Frame Count 0.0 - Brightness 0.0 - Contrast 0.0 - Saturation 0.0 - Hue 0.0 - Gain 1.0 - Convert RGB","title":"4. Show Properties:"},{"location":"Python/Libs/ComputerVision/03.PerspectiveTransform/","text":"import cv2 import numpy as np import math file = \"Images/wokrplace.png\" book = [[3591, 2270], [3644, 2960], [2553, 2141], [2464, 2779]] keyboard1 = [[1756, 2236], [2483, 1742], [2048, 2501], [2780, 1951]] keyboard2 = [[1147, 2106], [1673, 1502], [1661, 2315], [2135, 1648]] monitor = [[1894, 165], [3778, 476], [1796, 1139], [3497, 1582]] notepad = [[1518, 1201], [1339, 1632], [690, 1122], [422, 1527]] def perspective_transform(points, image): pt_A = points[0] pt_B = points[1] pt_C = points[2] pt_D = points[3] photo = cv2.imread(image) line1 = (pt_A, pt_B) line2 = (pt_C, pt_D) red = (0, 0, 255) width = int(math.sqrt((pt_A[0] - pt_B[0]) ** 2 + (pt_A[1] - pt_B[1]) ** 2)) height = int(math.sqrt((pt_A[0] - pt_C[0]) ** 2 + (pt_A[1] - pt_C[1]) ** 2)) cv2.line(img=photo, pt1=line1[0], pt2=line1[1], color=red, thickness=5) cv2.line(img=photo, pt1=line2[0], pt2=line2[1], color=red, thickness=5) pts1 = np.float32([pt_A, pt_B, pt_C, pt_D]) pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]]) matrix = cv2.getPerspectiveTransform(pts1, pts2) imgOutput = cv2.warpPerspective(photo, matrix, (width, height)) cv2.imshow(\"Original\", photo) cv2.imshow(\"Perspective Transformation\", imgOutput) cv2.waitKey(0) perspective_transform(keyboard1, file)","title":"03.PerspectiveTransform"},{"location":"Python/ORM/SQLAlchemy/1_sql_connection/","text":"Connection Filename: sql_connection.py Install: pip install sqlalchemy Import libs: sqlalchemy dotenv os from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os Load environment parameters for connection: Save environment variables (connection parameters) load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] Connection: engine, need for connection to database base, need for work with table session, for tasks - create, upload, commit, delete engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"Python/ORM/SQLAlchemy/1_sql_connection/#connection","text":"Filename: sql_connection.py Install: pip install sqlalchemy Import libs: sqlalchemy dotenv os from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os Load environment parameters for connection: Save environment variables (connection parameters) load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] Connection: engine, need for connection to database base, need for work with table session, for tasks - create, upload, commit, delete engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"Python/ORM/SQLAlchemy/2-sql_table_list/","text":"Table List Filename: sql_table_list.py Import: python from sql_connection import base from sqlalchemy import Column, Integer, String Table properties: python class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"Python/ORM/SQLAlchemy/2-sql_table_list/#table-list","text":"Filename: sql_table_list.py Import: python from sql_connection import base from sqlalchemy import Column, Integer, String Table properties: python class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"Python/ORM/SQLAlchemy/3_sql_create_table/","text":"Create Table Filename: sql_create_table.py Import: python from sql_connection import base, engine from sql_table_list import TableCustomers RUN: Create Table python table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"Python/ORM/SQLAlchemy/3_sql_create_table/#create-table","text":"Filename: sql_create_table.py Import: python from sql_connection import base, engine from sql_table_list import TableCustomers RUN: Create Table python table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"Python/ORM/SQLAlchemy/4-sql_insert_data/","text":"Insert data Filename: sql_insert_data.py Upload one string: Import: python from sql_connection import session from sql_table_list import TableCustomers Parameters: python table = TableCustomers Data: python row_0 = table(name=\"Marry\", age=26, grade=\"R\") Add data and commit: python session.add(row) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id Upload more string: Data python row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") Add data and commit: python session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Insert data"},{"location":"Python/ORM/SQLAlchemy/4-sql_insert_data/#insert-data","text":"Filename: sql_insert_data.py","title":"Insert data"},{"location":"Python/ORM/SQLAlchemy/4-sql_insert_data/#upload-one-string","text":"Import: python from sql_connection import session from sql_table_list import TableCustomers Parameters: python table = TableCustomers Data: python row_0 = table(name=\"Marry\", age=26, grade=\"R\") Add data and commit: python session.add(row) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id","title":"Upload one string:"},{"location":"Python/ORM/SQLAlchemy/4-sql_insert_data/#upload-more-string","text":"Data python row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") Add data and commit: python session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Upload more string:"},{"location":"Python/ORM/SQLAlchemy/5-sql_read_data/","text":"Get Data Filename: sql_read_data.py Import: python from sql_connection import session from sql_table_list import TableCustomers Simple query Query: python table = TableCustomers query = session.query(table) Get data: python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Marry, get.age: 26, get.grade: R get.name: Fredy, get.age: 38, get.grade: C get.name: Mark, get.age: 42, get.grade: D get.name: Jack, get.age: 21, get.grade: A get.name: Brain, get.age: 38, get.grade: B get.name: Alice, get.age: 41, get.grade: E LOG: SQL Fortmat: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" ORDER BY Query: python table = TableCustomers query = session.query(table).order_by(table.name) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Alice, get.age: 41, get.grade: E get.name: Brain, get.age: 38, get.grade: B get.name: Fredy, get.age: 38, get.grade: C get.name: Jack, get.age: 21, get.grade: A get.name: Mark, get.age: 42, get.grade: D get.name: Marry, get.age: 26, get.grade: R ``` SQL format log: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" FILTER Query: python table = TableCustomers query = session.query(table).order_by(table.name).filter(table.age <= 30) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Jack, get.age: 21, get.grade: A get.name: Marry, get.age: 26, get.grade: R ``` LOG: SQL Format: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" WHERE \"Customers\".age <= %(age_1)s ORDER BY \"Customers\".name","title":"Get Data"},{"location":"Python/ORM/SQLAlchemy/5-sql_read_data/#get-data","text":"Filename: sql_read_data.py Import: python from sql_connection import session from sql_table_list import TableCustomers","title":"Get Data"},{"location":"Python/ORM/SQLAlchemy/5-sql_read_data/#simple-query","text":"Query: python table = TableCustomers query = session.query(table) Get data: python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Marry, get.age: 26, get.grade: R get.name: Fredy, get.age: 38, get.grade: C get.name: Mark, get.age: 42, get.grade: D get.name: Jack, get.age: 21, get.grade: A get.name: Brain, get.age: 38, get.grade: B get.name: Alice, get.age: 41, get.grade: E LOG: SQL Fortmat: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\"","title":"Simple query"},{"location":"Python/ORM/SQLAlchemy/5-sql_read_data/#order-by","text":"Query: python table = TableCustomers query = session.query(table).order_by(table.name) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Alice, get.age: 41, get.grade: E get.name: Brain, get.age: 38, get.grade: B get.name: Fredy, get.age: 38, get.grade: C get.name: Jack, get.age: 21, get.grade: A get.name: Mark, get.age: 42, get.grade: D get.name: Marry, get.age: 26, get.grade: R ``` SQL format log: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\"","title":"ORDER BY"},{"location":"Python/ORM/SQLAlchemy/5-sql_read_data/#filter","text":"Query: python table = TableCustomers query = session.query(table).order_by(table.name).filter(table.age <= 30) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Jack, get.age: 21, get.grade: A get.name: Marry, get.age: 26, get.grade: R ``` LOG: SQL Format: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" WHERE \"Customers\".age <= %(age_1)s ORDER BY \"Customers\".name","title":"FILTER"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/","text":"SQLAlchemy connection to PostgreSQL Connection Filename: sql_connection.py 1) Install: pip install sqlalchemy 2) Import libs: from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os 3) Load environment parameters for connection: load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] 4) Connection: engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker() Table List Filename: sql_table_list.py 1) Import: from sql_connection import base from sqlalchemy import Column, Integer, String 2) Table properties: class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50)) Create Table Filename: sql_create_table.py 1) Import: from sql_connection import base, engine from sql_table_list import TableCustomers 2) RUN: Create Table table = TableCustomers base.metadata.create_all(engine) Insert data Filename: sql_insert_data.py Upload one string: 1) Import: from sql_connection import session from sql_table_list import TableCustomers 2) Parameters: table = TableCustomers 3) Data: row_0 = table(name=\"Marry\", age=26, grade=\"R\") 4) Add data and commit: session.add(row) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id Upload more string: 3) Data row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") 4) Add data and commit: session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"SQLAlchemy"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#sqlalchemy-connection-to-postgresql","text":"","title":"SQLAlchemy connection to PostgreSQL"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#connection","text":"Filename: sql_connection.py 1) Install: pip install sqlalchemy 2) Import libs: from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os 3) Load environment parameters for connection: load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] 4) Connection: engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#table-list","text":"Filename: sql_table_list.py 1) Import: from sql_connection import base from sqlalchemy import Column, Integer, String 2) Table properties: class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#create-table","text":"Filename: sql_create_table.py 1) Import: from sql_connection import base, engine from sql_table_list import TableCustomers 2) RUN: Create Table table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#insert-data","text":"Filename: sql_insert_data.py","title":"Insert data"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#upload-one-string","text":"1) Import: from sql_connection import session from sql_table_list import TableCustomers 2) Parameters: table = TableCustomers 3) Data: row_0 = table(name=\"Marry\", age=26, grade=\"R\") 4) Add data and commit: session.add(row) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id","title":"Upload one string:"},{"location":"Python/ORM/SQLAlchemy/sqlalchemy-info/#upload-more-string","text":"3) Data row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") 4) Add data and commit: session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Upload more string:"},{"location":"mkdocs/ConfigYAMLexamples/","text":"Config yaml examples Site Name site_name: NS-Labs Navigation site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' Themes External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Examples"},{"location":"mkdocs/ConfigYAMLexamples/#config-yaml-examples","text":"","title":"Config yaml examples"},{"location":"mkdocs/ConfigYAMLexamples/#site-name","text":"site_name: NS-Labs","title":"Site Name"},{"location":"mkdocs/ConfigYAMLexamples/#navigation","text":"site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md'","title":"Navigation"},{"location":"mkdocs/ConfigYAMLexamples/#themes","text":"External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Themes"},{"location":"mkdocs/GH-Actions/","text":"GitHub Actions using: Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions"},{"location":"mkdocs/GH-Actions/#github-actions-using","text":"Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions using:"},{"location":"mkdocs/info/","text":"Welcome to MkDocs (NAME) Commands: mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site Project layout: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files 1. Start create MkDocs mkdocs new . - create new mkdocs.yml file mkdocs serve - run server 2. Build site files mkdocs build Use Theme Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"About"},{"location":"mkdocs/info/#welcome-to-mkdocs-name","text":"","title":"Welcome to MkDocs (NAME)"},{"location":"mkdocs/info/#commands","text":"mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site","title":"Commands:"},{"location":"mkdocs/info/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files","title":"Project layout:"},{"location":"mkdocs/info/#1-start-create-mkdocs","text":"mkdocs new . - create new mkdocs.yml file mkdocs serve - run server","title":"1. Start create MkDocs"},{"location":"mkdocs/info/#2-build-site-files","text":"mkdocs build","title":"2. Build site files"},{"location":"mkdocs/info/#use-theme","text":"Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"Use Theme"}]}