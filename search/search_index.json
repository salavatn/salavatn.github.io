{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Page (index.md) \u042d\u0442\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430.","title":"Home Page (index.md)"},{"location":"#home-page-indexmd","text":"\u042d\u0442\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430.","title":"Home Page (index.md)"},{"location":"01_Python/class/","text":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b) \u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u0440\u0438\u043c\u0435\u0440 1 - list Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # [] \u041f\u0440\u0438\u043c\u0435\u0440 2 - int Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes() Class class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b)"},{"location":"01_Python/class/#objects","text":"\u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445","title":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b)"},{"location":"01_Python/class/#1-list","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # []","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1 - list"},{"location":"01_Python/class/#2-int","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes()","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2 - int"},{"location":"01_Python/class/#class","text":"class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Class"},{"location":"01_Python/Usefull_Libs/Faker/","text":"Python Library: Faker Faker provide you fake data for test project. Install and check Simple Example Search available Parameters Popular parameters Example of using Faker Install and check PyPi Link pip install Faker pip list Package Version ------------------ ------- Faker 18.3.0 Simple Example from faker import Faker fake = Faker() name = fake.name() country = fake.country() print(f\"{name} from {country}!\") Daniel Foster from Madagascar! Search available Parameters from faker import Faker fake = Faker() keyword = \"credit\" # What are you looking for? parameters = dir(fake) for element in parameters: if keyword in element: print(element) credit_card_expire credit_card_full credit_card_number credit_card_provider credit_card_security_code from faker import Faker fake = Faker() credit_card = fake.credit_card_full() print(credit_card) Mastercard Brenda Johnson 2681694391010925 11/29 CVV: 925 Popular parameters from faker import Faker fake = Faker() print(fake.chrome()) # Mozilla/5.0 (Linux; Android 4.2) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/26.0.898.0 Safari/534.1 print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA* Example of using Faker from faker import Faker fake = Faker() name = fake.first_name_male() time = fake.time() month = fake.month_name() delivery_date = fake.future_datetime() domain = fake.domain_name() person = fake.name() email = fake.free_email() phone = fake.phone_number() msg = f\"Mr. {name}, \\n\" \\ f\"Your package has been shipped - ETA: {time} \\n\" \\ f\"on 18th {month} at your residence. \\n\" \\ f\"Estimated delivery date is {delivery_date}\\n\" \\ f\"To track your parcel, visit www.{domain}.\\n\" \\ f\"\\n\" \\ f\"Best regards,\\n\" \\ f\"{person}\\n\" \\ f\"Email:\\t{email}\\n\" \\ f\"Phone:\\t{phone}\" print(msg) Mr. Brian, Your package has been shipped - ETA: 14:05:44 on 18th July at your residence. Estimated delivery date is 2023-04-08 15:29:43 To track your parcel, visit www.poole.com. Best regards, Thomas Jones Email: jgallegos@yahoo.com Phone: +1-285-904-4881","title":"Faker"},{"location":"01_Python/Usefull_Libs/Faker/#python-library-faker","text":"Faker provide you fake data for test project. Install and check Simple Example Search available Parameters Popular parameters Example of using Faker","title":"Python Library: Faker"},{"location":"01_Python/Usefull_Libs/Faker/#install-and-check","text":"PyPi Link pip install Faker pip list Package Version ------------------ ------- Faker 18.3.0","title":"Install and check"},{"location":"01_Python/Usefull_Libs/Faker/#simple-example","text":"from faker import Faker fake = Faker() name = fake.name() country = fake.country() print(f\"{name} from {country}!\") Daniel Foster from Madagascar!","title":"Simple Example"},{"location":"01_Python/Usefull_Libs/Faker/#search-available-parameters","text":"from faker import Faker fake = Faker() keyword = \"credit\" # What are you looking for? parameters = dir(fake) for element in parameters: if keyword in element: print(element) credit_card_expire credit_card_full credit_card_number credit_card_provider credit_card_security_code from faker import Faker fake = Faker() credit_card = fake.credit_card_full() print(credit_card) Mastercard Brenda Johnson 2681694391010925 11/29 CVV: 925","title":"Search available Parameters"},{"location":"01_Python/Usefull_Libs/Faker/#popular-parameters","text":"from faker import Faker fake = Faker() print(fake.chrome()) # Mozilla/5.0 (Linux; Android 4.2) AppleWebKit/534.1 (KHTML, like Gecko) Chrome/26.0.898.0 Safari/534.1 print(fake.city()) # Williamston print(fake.color()) # #39ddd8 print(fake.company()) # Powell Ltd print(fake.credit_card_number()) # 4773904006800585 print(fake.date()) # 1996-06-10 print(fake.date_time()) # 1993-02-01 19:19:14 print(fake.emoji()) # \ud83e\uddd1\u200d\ud83d\ude80 print(fake.first_name()) # Christine print(fake.free_email()) # sullivanamanda@gmail.com print(fake.ipv4()) # 103.19.125.13 print(fake.ipv4_private()) # 172.26.238.74 print(fake.ipv4_public()) # 148.21.52.81 print(fake.last_name()) # Monroe print(fake.name()) # Katherine Richardson print(fake.password()) # +xV0yTHrA*","title":"Popular parameters"},{"location":"01_Python/Usefull_Libs/Faker/#example-of-using-faker","text":"from faker import Faker fake = Faker() name = fake.first_name_male() time = fake.time() month = fake.month_name() delivery_date = fake.future_datetime() domain = fake.domain_name() person = fake.name() email = fake.free_email() phone = fake.phone_number() msg = f\"Mr. {name}, \\n\" \\ f\"Your package has been shipped - ETA: {time} \\n\" \\ f\"on 18th {month} at your residence. \\n\" \\ f\"Estimated delivery date is {delivery_date}\\n\" \\ f\"To track your parcel, visit www.{domain}.\\n\" \\ f\"\\n\" \\ f\"Best regards,\\n\" \\ f\"{person}\\n\" \\ f\"Email:\\t{email}\\n\" \\ f\"Phone:\\t{phone}\" print(msg) Mr. Brian, Your package has been shipped - ETA: 14:05:44 on 18th July at your residence. Estimated delivery date is 2023-04-08 15:29:43 To track your parcel, visit www.poole.com. Best regards, Thomas Jones Email: jgallegos@yahoo.com Phone: +1-285-904-4881","title":"Example of using Faker"},{"location":"02_PostgreSQL/Querys/","text":"SQL Queries Check Tables: SELECT table_name AS \"Table Name\" FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = 'public'; from sqlalchemy import Table, Column, Integer, String, MetaData meta = MetaData() clients = Table( 'clients', meta, Column('ID', Integer, primary_key = True), Column('FirstName', String), Column('LastName', String), Column('Balance', String), Column('Birthday', String), Column('Email', String) ) ID = 1 fname = fake.first_name() lname = fake.last_name() balance = fake.random_int(11, 243589) birth_date = fake.date_of_birth() email = fake.company_email()","title":"SQL Queries"},{"location":"02_PostgreSQL/Querys/#sql-queries","text":"","title":"SQL Queries"},{"location":"02_PostgreSQL/Querys/#check-tables","text":"SELECT table_name AS \"Table Name\" FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = 'public'; from sqlalchemy import Table, Column, Integer, String, MetaData meta = MetaData() clients = Table( 'clients', meta, Column('ID', Integer, primary_key = True), Column('FirstName', String), Column('LastName', String), Column('Balance', String), Column('Birthday', String), Column('Email', String) ) ID = 1 fname = fake.first_name() lname = fake.last_name() balance = fake.random_int(11, 243589) birth_date = fake.date_of_birth() email = fake.company_email()","title":"Check Tables:"},{"location":"03_AWS/01_connection/","text":"","title":"01 connection"},{"location":"03_AWS/lambda/","text":"Upload API Function Overview: nmp (node) Install node and check version brew install node node -v v19.8.1 Install serverless npm install -g serverless serverless, create project Create Project \"lambda\" mkdir lambda cd lambda python3 -m venv venv . ./venv/bin/activate Install Serverless and check pip install serverless-wsgi pip list Package Version --------------- ------- MarkupSafe 2.1.2 pip 21.2.4 serverless-wsgi 3.0.2 setuptools 58.0.4 Werkzeug 2.2.3 Create serverless template serverless create --template aws-python3 --path . Install plugin serverless plugin install -n serverless-wsgi Pre-Configure Backup templates mv .gitignore .gitignore_BACKUP mv handler.py handler.py_BACKUP mv serverless.yml serverless.yml_BACKUP Run serverless deploy","title":"Upload API Function"},{"location":"03_AWS/lambda/#upload-api-function","text":"Overview:","title":"Upload API Function"},{"location":"03_AWS/lambda/#nmp-node","text":"Install node and check version brew install node node -v v19.8.1 Install serverless npm install -g serverless","title":"nmp (node)"},{"location":"03_AWS/lambda/#serverless-create-project","text":"Create Project \"lambda\" mkdir lambda cd lambda python3 -m venv venv . ./venv/bin/activate Install Serverless and check pip install serverless-wsgi pip list Package Version --------------- ------- MarkupSafe 2.1.2 pip 21.2.4 serverless-wsgi 3.0.2 setuptools 58.0.4 Werkzeug 2.2.3 Create serverless template serverless create --template aws-python3 --path . Install plugin serverless plugin install -n serverless-wsgi","title":"serverless, create project"},{"location":"03_AWS/lambda/#pre-configure","text":"Backup templates mv .gitignore .gitignore_BACKUP mv handler.py handler.py_BACKUP mv serverless.yml serverless.yml_BACKUP","title":"Pre-Configure"},{"location":"03_AWS/lambda/#run","text":"serverless deploy","title":"Run"},{"location":"03_AWS/s3-bucket/","text":"AWS You will learn \"How to\": 1. [Done] Create new Bucket 2. [Done] Get list Bucket - Get via RESOURCE - Get via CLIENT 3. [Done] Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 7. Check Access Permission Before using Boto3, you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI. You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user. Configure AWS CLI pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json Amazon S3 examples https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html 1. Create new Bucket Simple code: import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) Code with exceptions import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\") 2. Get list of Bucket 2.1. Get via RESOURCE: import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 2.2. Get via CLIENT: import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 3. Upload file to Bucket Upload via \"RESOURCE\" and \"PUT_OBJECT\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file) Upload via \"CLIENT\" and \"UPLOAD_FILE\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename) 7. Check Access Permission import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"AWS"},{"location":"03_AWS/s3-bucket/#aws","text":"You will learn \"How to\": 1. [Done] Create new Bucket 2. [Done] Get list Bucket - Get via RESOURCE - Get via CLIENT 3. [Done] Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 7. Check Access Permission Before using Boto3, you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI. You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user.","title":"AWS"},{"location":"03_AWS/s3-bucket/#configure-aws-cli","text":"pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json","title":"Configure AWS CLI"},{"location":"03_AWS/s3-bucket/#amazon-s3-examples","text":"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html","title":"Amazon S3 examples"},{"location":"03_AWS/s3-bucket/#1-create-new-bucket","text":"","title":"1. Create new Bucket"},{"location":"03_AWS/s3-bucket/#simple-code","text":"import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location)","title":"Simple code:"},{"location":"03_AWS/s3-bucket/#code-with-exceptions","text":"import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\")","title":"Code with exceptions"},{"location":"03_AWS/s3-bucket/#2-get-list-of-bucket","text":"","title":"2. Get list of Bucket"},{"location":"03_AWS/s3-bucket/#21-get-via-resource","text":"import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.1. Get via RESOURCE:"},{"location":"03_AWS/s3-bucket/#22-get-via-client","text":"import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.2. Get via CLIENT:"},{"location":"03_AWS/s3-bucket/#3-upload-file-to-bucket","text":"","title":"3. Upload file to Bucket"},{"location":"03_AWS/s3-bucket/#upload-via-resource-and-put_object","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file)","title":"Upload via \"RESOURCE\" and \"PUT_OBJECT\""},{"location":"03_AWS/s3-bucket/#upload-via-client-and-upload_file","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename)","title":"Upload via \"CLIENT\" and \"UPLOAD_FILE\""},{"location":"03_AWS/s3-bucket/#7-check-access-permission","text":"import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"7. Check Access Permission"},{"location":"ComputerVision/01.Read_Image/","text":"Work with pictures 1. Read Image file import cv2 file = \"Images/monkey.jpg\" picture = cv2.imread(filename=file, flags=1) cv2.imshow(winname=\"Original Photo\", mat=picture) cv2.waitKey(delay=0) cv2.imread() (filename=file, flags=1) - cv2.IMREAD_COLOR (filename=file, flags=-1) - cv2.IMREAD_UNCHANGED (filename=file, flags=0) - cv2.IMREAD_GRAYSCALE cv2.waitKey(): (delay=0) - None (delay=5000) - 5 second 2. Get Image Size import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) dimensions = picture.shape height = picture.shape[0] width = picture.shape[1] channels = picture.shape[2] print('Image Dimension : ', dimensions) print('Image Height : ', height) print('Image Width : ', width) print('Number of Channels : ', channels) cv2.waitKey(0) Image Dimension : (430, 600, 3) Image Height : 430 Image Width : 600 Number of Channels : 3 3. Resize Image import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) print(f\"Original:\\t {picture.shape} \\n\" f\"Resized:\\t {pic_Resized.shape}\") cv2.waitKey(0) 4. Crop Image import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Cropped = picture[117:309, 8:593] print(f\"Original:\\t {picture.shape} \\n\" f\"Cropped:\\t {pic_Cropped.shape}\") cv2.imshow(\"Original Picture\", picture) cv2.imshow(\"Image Cropped\", pic_Cropped) cv2.waitKey(0) 5. Save image as new file import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) pic_Cropped = picture[117:309, 8:593] cv2.imwrite(\"Images/CroppedImage.jpg\", pic_Cropped) cv2.imwrite(\"Images/ResizedImage.jpg\", pic_Resized) cv2.waitKey(0)","title":"Work with pictures"},{"location":"ComputerVision/01.Read_Image/#work-with-pictures","text":"","title":"Work with pictures"},{"location":"ComputerVision/01.Read_Image/#1-read-image-file","text":"import cv2 file = \"Images/monkey.jpg\" picture = cv2.imread(filename=file, flags=1) cv2.imshow(winname=\"Original Photo\", mat=picture) cv2.waitKey(delay=0) cv2.imread() (filename=file, flags=1) - cv2.IMREAD_COLOR (filename=file, flags=-1) - cv2.IMREAD_UNCHANGED (filename=file, flags=0) - cv2.IMREAD_GRAYSCALE cv2.waitKey(): (delay=0) - None (delay=5000) - 5 second","title":"1. Read Image file"},{"location":"ComputerVision/01.Read_Image/#2-get-image-size","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) dimensions = picture.shape height = picture.shape[0] width = picture.shape[1] channels = picture.shape[2] print('Image Dimension : ', dimensions) print('Image Height : ', height) print('Image Width : ', width) print('Number of Channels : ', channels) cv2.waitKey(0) Image Dimension : (430, 600, 3) Image Height : 430 Image Width : 600 Number of Channels : 3","title":"2. Get Image Size"},{"location":"ComputerVision/01.Read_Image/#3-resize-image","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) print(f\"Original:\\t {picture.shape} \\n\" f\"Resized:\\t {pic_Resized.shape}\") cv2.waitKey(0)","title":"3. Resize Image"},{"location":"ComputerVision/01.Read_Image/#4-crop-image","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Cropped = picture[117:309, 8:593] print(f\"Original:\\t {picture.shape} \\n\" f\"Cropped:\\t {pic_Cropped.shape}\") cv2.imshow(\"Original Picture\", picture) cv2.imshow(\"Image Cropped\", pic_Cropped) cv2.waitKey(0)","title":"4. Crop Image"},{"location":"ComputerVision/01.Read_Image/#5-save-image-as-new-file","text":"import cv2 file = \"Images/car.jpeg\" picture = cv2.imread(file) pic_Resized = cv2.resize(src=picture, dsize=(450, 200)) pic_Cropped = picture[117:309, 8:593] cv2.imwrite(\"Images/CroppedImage.jpg\", pic_Cropped) cv2.imwrite(\"Images/ResizedImage.jpg\", pic_Resized) cv2.waitKey(0)","title":"5. Save image as new file"},{"location":"ComputerVision/02.Read_Video/","text":"Work with video VideoCapture : 1. Read the video file import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) while video.isOpened(): status, capture = video.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break video.release() cv2.destroyAllWindows() 2. Read the WebCam import cv2 webcam = cv2.VideoCapture(0) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows() 3. Set parameters import cv2 webcam = cv2.VideoCapture(0) webcam.set(3, 320) webcam.set(4, 240) webcam.set(10, 100) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows() 4. Show Properties: import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) print(\"Get the video file/webcam properties:\") print(f\"{video.get(cv2.CAP_PROP_FRAME_WIDTH)}\\t- Frame Width \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_HEIGHT)}\\t- Frame Height \\n\" f\"{video.get(cv2.CAP_PROP_FPS)}\\t- FPS \\n\" f\"{video.get(cv2.CAP_PROP_POS_MSEC)} \\t- MSEC \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_COUNT)}\\t- Frame Count \\n\" f\"{video.get(cv2.CAP_PROP_BRIGHTNESS)} \\t- Brightness \\n\" f\"{video.get(cv2.CAP_PROP_CONTRAST)} \\t- Contrast \\n\" f\"{video.get(cv2.CAP_PROP_SATURATION)} \\t- Saturation \\n\" f\"{video.get(cv2.CAP_PROP_HUE)} \\t- Hue \\n\" f\"{video.get(cv2.CAP_PROP_GAIN)} \\t- Gain \\n\" f\"{video.get(cv2.CAP_PROP_CONVERT_RGB)} \\t- Convert RGB\") video.release() cv2.destroyAllWindows() Get the video file/webcam properties: 1280.0 - Frame Width 720.0 - Frame Height 25.0 - FPS 0.0 - MSEC 3706.0 - Frame Count 0.0 - Brightness 0.0 - Contrast 0.0 - Saturation 0.0 - Hue 0.0 - Gain 1.0 - Convert RGB","title":"Work with video `VideoCapture`:"},{"location":"ComputerVision/02.Read_Video/#work-with-video-videocapture","text":"","title":"Work with video VideoCapture:"},{"location":"ComputerVision/02.Read_Video/#1-read-the-video-file","text":"import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) while video.isOpened(): status, capture = video.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break video.release() cv2.destroyAllWindows()","title":"1. Read the video file"},{"location":"ComputerVision/02.Read_Video/#2-read-the-webcam","text":"import cv2 webcam = cv2.VideoCapture(0) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows()","title":"2. Read the WebCam"},{"location":"ComputerVision/02.Read_Video/#3-set-parameters","text":"import cv2 webcam = cv2.VideoCapture(0) webcam.set(3, 320) webcam.set(4, 240) webcam.set(10, 100) while webcam.isOpened(): status, capture = webcam.read() if status is True: cv2.imshow(\"Video Capture\", capture) if cv2.waitKey(1) & 0xFF == ord('q'): break webcam.release() cv2.destroyAllWindows()","title":"3. Set parameters"},{"location":"ComputerVision/02.Read_Video/#4-show-properties","text":"import cv2 file = \"Videos/Road-Construction.mp4\" video = cv2.VideoCapture(file) print(\"Get the video file/webcam properties:\") print(f\"{video.get(cv2.CAP_PROP_FRAME_WIDTH)}\\t- Frame Width \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_HEIGHT)}\\t- Frame Height \\n\" f\"{video.get(cv2.CAP_PROP_FPS)}\\t- FPS \\n\" f\"{video.get(cv2.CAP_PROP_POS_MSEC)} \\t- MSEC \\n\" f\"{video.get(cv2.CAP_PROP_FRAME_COUNT)}\\t- Frame Count \\n\" f\"{video.get(cv2.CAP_PROP_BRIGHTNESS)} \\t- Brightness \\n\" f\"{video.get(cv2.CAP_PROP_CONTRAST)} \\t- Contrast \\n\" f\"{video.get(cv2.CAP_PROP_SATURATION)} \\t- Saturation \\n\" f\"{video.get(cv2.CAP_PROP_HUE)} \\t- Hue \\n\" f\"{video.get(cv2.CAP_PROP_GAIN)} \\t- Gain \\n\" f\"{video.get(cv2.CAP_PROP_CONVERT_RGB)} \\t- Convert RGB\") video.release() cv2.destroyAllWindows() Get the video file/webcam properties: 1280.0 - Frame Width 720.0 - Frame Height 25.0 - FPS 0.0 - MSEC 3706.0 - Frame Count 0.0 - Brightness 0.0 - Contrast 0.0 - Saturation 0.0 - Hue 0.0 - Gain 1.0 - Convert RGB","title":"4. Show Properties:"},{"location":"ComputerVision/03.PerspectiveTransform/","text":"import cv2 import numpy as np import math file = \"Images/wokrplace.png\" book = [[3591, 2270], [3644, 2960], [2553, 2141], [2464, 2779]] keyboard1 = [[1756, 2236], [2483, 1742], [2048, 2501], [2780, 1951]] keyboard2 = [[1147, 2106], [1673, 1502], [1661, 2315], [2135, 1648]] monitor = [[1894, 165], [3778, 476], [1796, 1139], [3497, 1582]] notepad = [[1518, 1201], [1339, 1632], [690, 1122], [422, 1527]] def perspective_transform(points, image): pt_A = points[0] pt_B = points[1] pt_C = points[2] pt_D = points[3] photo = cv2.imread(image) line1 = (pt_A, pt_B) line2 = (pt_C, pt_D) red = (0, 0, 255) width = int(math.sqrt((pt_A[0] - pt_B[0]) ** 2 + (pt_A[1] - pt_B[1]) ** 2)) height = int(math.sqrt((pt_A[0] - pt_C[0]) ** 2 + (pt_A[1] - pt_C[1]) ** 2)) cv2.line(img=photo, pt1=line1[0], pt2=line1[1], color=red, thickness=5) cv2.line(img=photo, pt1=line2[0], pt2=line2[1], color=red, thickness=5) pts1 = np.float32([pt_A, pt_B, pt_C, pt_D]) pts2 = np.float32([[0, 0], [width, 0], [0, height], [width, height]]) matrix = cv2.getPerspectiveTransform(pts1, pts2) imgOutput = cv2.warpPerspective(photo, matrix, (width, height)) cv2.imshow(\"Original\", photo) cv2.imshow(\"Perspective Transformation\", imgOutput) cv2.waitKey(0) perspective_transform(keyboard1, file)","title":"03.PerspectiveTransform"},{"location":"EnvironmentVariables/EnvVar/","text":"Environment Variables 1. Linux 1.1. Check variables env 1.2. Add new variable (temporary) export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' export EMAIL='salavat@nigmatullin.net' echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW echo $EMAIL # salavat@nigmatullin.net The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\" 1.3. Add new variable (forewer) Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS 2. Python 2.1. Read the system variables: import os os_env = os.environ os_env = dict(os_env) print(f\"Count of variables: \\t{len(os_env)}\") print(f\"Variable Keyword: \\t\\t{os_env.keys()}\") Count of variables: 55 Variable Keyword: dict_keys(['PATH', 'LC_MEASUREMENT', 'XAUTHORITY', 'LC_TELEPHONE', 'XDG_DATA_DIRS', 'LC_TIME', 'DBUS_SESSION_BUS_ADDRESS', 'XDG_CURRENT_DESKTOP', 'QT_AUTO_SCREEN_SCALE_FACTOR', 'SSH_AGENT_PID', 'LC_PAPER', 'SESSION_MANAGER', 'LOGNAME', 'PWD', 'PAM_KWALLET5_LOGIN', 'IM_CONFIG_PHASE', 'PYCHARM_HOSTED', 'XCURSOR_THEME', 'LANGUAGE', 'PYTHONPATH', 'KDE_SESSION_VERSION', 'SHELL', 'LC_ADDRESS', 'KDE_FULL_SESSION', 'XDG_SESSION_PATH', 'SYSTEMD_EXEC_PID', 'XDG_SESSION_DESKTOP', 'SHLVL', 'LC_IDENTIFICATION', 'KDE_APPLICATIONS_AS_SCOPE', 'LC_MONETARY', 'KDE_SESSION_UID', 'XDG_CONFIG_DIRS', 'LANG', 'XDG_SEAT_PATH', 'XDG_SESSION_ID', 'XDG_SESSION_TYPE', 'DISPLAY', 'GTK_RC_FILES', 'LC_NAME', 'XDG_SESSION_CLASS', 'XCURSOR_SIZE', 'PYTHONIOENCODING', 'GPG_AGENT_INFO', 'DESKTOP_SESSION', 'USER', 'GTK2_RC_FILES', 'QT_ACCESSIBILITY', 'LC_NUMERIC', 'SSH_AUTH_SOCK', 'XDG_SEAT', 'PYTHONUNBUFFERED', 'XDG_VTNR', 'XDG_RUNTIME_DIR', 'HOME']) 2.2. Get variable: import os env_path = os.getenv('PATH') print(f'PATH Variable: {env_path}') PATH Variable: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin 2.2. Add custom variables to system: Create file .env Add customer variables: PY_MYSQL_ADDR=\"172.30.0.100\" PY_MYSQL_USER=\"root\" PY_MYSQL_PSWD=\"Pass_1234\" Install python-dotenv For more information about: dotEnv pip install python-dotenv Python code, step #1 Load customer variables from dotenv import load_dotenv load_dotenv() # take environment variables from .env Python code, step #2 Checking system environment variables: from dotenv import load_dotenv import os os_env = os.environ env_before = list(dict(os_env).keys()) print(f\"Count of variables:\\t{len(os_env)}\") load_dotenv() print(f\"Count of variables:\\t{len(os_env)}\") env_after = list(dict(os_env).keys()) env_difference = [] for element in env_after: if element not in env_before: env_difference.append(element) print(f'New Env Variables:\\t{env_difference}') Result: Count of variables: 55 Count of variables: 58 New Env Variables: ['PY_MYSQL_ADDR', 'PY_MYSQL_USER', 'PY_MYSQL_PSWD'] Python code, step #3 Check variables from dotenv import load_dotenv import os load_dotenv() os_env = dict(os.environ) print(f\"PY_MYSQL_ADDR: {os_env['PY_MYSQL_ADDR']}\") print(f\"PY_MYSQL_USER: {os_env['PY_MYSQL_USER']}\") print(f\"PY_MYSQL_PSWD: {os_env['PY_MYSQL_PSWD']}\") PY_MYSQL_ADDR: 172.30.0.100 PY_MYSQL_USER: root PY_MYSQL_PSWD: Pass_1234 3. GitHub Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"DotEnv"},{"location":"EnvironmentVariables/EnvVar/#environment-variables","text":"","title":"Environment Variables"},{"location":"EnvironmentVariables/EnvVar/#1-linux","text":"","title":"1. Linux"},{"location":"EnvironmentVariables/EnvVar/#11-check-variables","text":"env","title":"1.1. Check variables"},{"location":"EnvironmentVariables/EnvVar/#12-add-new-variable-temporary","text":"export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' export EMAIL='salavat@nigmatullin.net' echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW echo $EMAIL # salavat@nigmatullin.net The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\"","title":"1.2. Add new variable (temporary)"},{"location":"EnvironmentVariables/EnvVar/#13-add-new-variable-forewer","text":"Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS","title":"1.3. Add new variable (forewer)"},{"location":"EnvironmentVariables/EnvVar/#2-python","text":"","title":"2. Python"},{"location":"EnvironmentVariables/EnvVar/#21-read-the-system-variables","text":"import os os_env = os.environ os_env = dict(os_env) print(f\"Count of variables: \\t{len(os_env)}\") print(f\"Variable Keyword: \\t\\t{os_env.keys()}\") Count of variables: 55 Variable Keyword: dict_keys(['PATH', 'LC_MEASUREMENT', 'XAUTHORITY', 'LC_TELEPHONE', 'XDG_DATA_DIRS', 'LC_TIME', 'DBUS_SESSION_BUS_ADDRESS', 'XDG_CURRENT_DESKTOP', 'QT_AUTO_SCREEN_SCALE_FACTOR', 'SSH_AGENT_PID', 'LC_PAPER', 'SESSION_MANAGER', 'LOGNAME', 'PWD', 'PAM_KWALLET5_LOGIN', 'IM_CONFIG_PHASE', 'PYCHARM_HOSTED', 'XCURSOR_THEME', 'LANGUAGE', 'PYTHONPATH', 'KDE_SESSION_VERSION', 'SHELL', 'LC_ADDRESS', 'KDE_FULL_SESSION', 'XDG_SESSION_PATH', 'SYSTEMD_EXEC_PID', 'XDG_SESSION_DESKTOP', 'SHLVL', 'LC_IDENTIFICATION', 'KDE_APPLICATIONS_AS_SCOPE', 'LC_MONETARY', 'KDE_SESSION_UID', 'XDG_CONFIG_DIRS', 'LANG', 'XDG_SEAT_PATH', 'XDG_SESSION_ID', 'XDG_SESSION_TYPE', 'DISPLAY', 'GTK_RC_FILES', 'LC_NAME', 'XDG_SESSION_CLASS', 'XCURSOR_SIZE', 'PYTHONIOENCODING', 'GPG_AGENT_INFO', 'DESKTOP_SESSION', 'USER', 'GTK2_RC_FILES', 'QT_ACCESSIBILITY', 'LC_NUMERIC', 'SSH_AUTH_SOCK', 'XDG_SEAT', 'PYTHONUNBUFFERED', 'XDG_VTNR', 'XDG_RUNTIME_DIR', 'HOME'])","title":"2.1. Read the system variables:"},{"location":"EnvironmentVariables/EnvVar/#22-get-variable","text":"import os env_path = os.getenv('PATH') print(f'PATH Variable: {env_path}') PATH Variable: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin","title":"2.2. Get variable:"},{"location":"EnvironmentVariables/EnvVar/#22-add-custom-variables-to-system","text":"Create file .env Add customer variables: PY_MYSQL_ADDR=\"172.30.0.100\" PY_MYSQL_USER=\"root\" PY_MYSQL_PSWD=\"Pass_1234\" Install python-dotenv For more information about: dotEnv pip install python-dotenv","title":"2.2. Add custom variables to system:"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-1","text":"Load customer variables from dotenv import load_dotenv load_dotenv() # take environment variables from .env","title":"Python code, step #1"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-2","text":"Checking system environment variables: from dotenv import load_dotenv import os os_env = os.environ env_before = list(dict(os_env).keys()) print(f\"Count of variables:\\t{len(os_env)}\") load_dotenv() print(f\"Count of variables:\\t{len(os_env)}\") env_after = list(dict(os_env).keys()) env_difference = [] for element in env_after: if element not in env_before: env_difference.append(element) print(f'New Env Variables:\\t{env_difference}') Result: Count of variables: 55 Count of variables: 58 New Env Variables: ['PY_MYSQL_ADDR', 'PY_MYSQL_USER', 'PY_MYSQL_PSWD']","title":"Python code, step #2"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-3","text":"Check variables from dotenv import load_dotenv import os load_dotenv() os_env = dict(os.environ) print(f\"PY_MYSQL_ADDR: {os_env['PY_MYSQL_ADDR']}\") print(f\"PY_MYSQL_USER: {os_env['PY_MYSQL_USER']}\") print(f\"PY_MYSQL_PSWD: {os_env['PY_MYSQL_PSWD']}\") PY_MYSQL_ADDR: 172.30.0.100 PY_MYSQL_USER: root PY_MYSQL_PSWD: Pass_1234","title":"Python code, step #3"},{"location":"EnvironmentVariables/EnvVar/#3-github","text":"Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"3. GitHub"},{"location":"SQLAlchemy/0_sqlalchemy-info/","text":"SQLAlchemy connection to PostgreSQL Connection Filename: sql_connection.py 1) Install: pip install sqlalchemy 2) Import libs: from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os 3) Load environment parameters for connection: load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] 4) Connection: engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker() Table List Filename: sql_table_list.py 1) Import: from sql_connection import base from sqlalchemy import Column, Integer, String 2) Table properties: class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50)) Create Table Filename: sql_create_table.py 1) Import: from sql_connection import base, engine from sql_table_list import TableCustomers 2) RUN: Create Table table = TableCustomers base.metadata.create_all(engine) Insert data Filename: sql_insert_data.py Upload one string: 1) Import: from sql_connection import session from sql_table_list import TableCustomers 2) Parameters: table = TableCustomers 3) Data: row_0 = table(name=\"Marry\", age=26, grade=\"R\") 4) Add data and commit: session.add(row) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id Upload more string: 3) Data row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") 4) Add data and commit: session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"SQLAlchemy"},{"location":"SQLAlchemy/0_sqlalchemy-info/#sqlalchemy-connection-to-postgresql","text":"","title":"SQLAlchemy connection to PostgreSQL"},{"location":"SQLAlchemy/0_sqlalchemy-info/#connection","text":"Filename: sql_connection.py 1) Install: pip install sqlalchemy 2) Import libs: from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os 3) Load environment parameters for connection: load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] 4) Connection: engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"SQLAlchemy/0_sqlalchemy-info/#table-list","text":"Filename: sql_table_list.py 1) Import: from sql_connection import base from sqlalchemy import Column, Integer, String 2) Table properties: class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"SQLAlchemy/0_sqlalchemy-info/#create-table","text":"Filename: sql_create_table.py 1) Import: from sql_connection import base, engine from sql_table_list import TableCustomers 2) RUN: Create Table table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"SQLAlchemy/0_sqlalchemy-info/#insert-data","text":"Filename: sql_insert_data.py","title":"Insert data"},{"location":"SQLAlchemy/0_sqlalchemy-info/#upload-one-string","text":"1) Import: from sql_connection import session from sql_table_list import TableCustomers 2) Parameters: table = TableCustomers 3) Data: row_0 = table(name=\"Marry\", age=26, grade=\"R\") 4) Add data and commit: session.add(row) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id","title":"Upload one string:"},{"location":"SQLAlchemy/0_sqlalchemy-info/#upload-more-string","text":"3) Data row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") 4) Add data and commit: session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() 5) LOG: SQL Format: INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Upload more string:"},{"location":"SQLAlchemy/1_sql_connection/","text":"Connection Filename: sql_connection.py Install: pip install sqlalchemy Import libs: sqlalchemy dotenv os from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os Load environment parameters for connection: Save environment variables (connection parameters) load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] Connection: engine, need for connection to database base, need for work with table session, for tasks - create, upload, commit, delete engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"SQLAlchemy/1_sql_connection/#connection","text":"Filename: sql_connection.py Install: pip install sqlalchemy Import libs: sqlalchemy dotenv os from sqlalchemy import create_engine from sqlalchemy.orm import declarative_base, sessionmaker from dotenv import load_dotenv import os Load environment parameters for connection: Save environment variables (connection parameters) load_dotenv() host = os.environ['SUPABASE_HOST'] database = os.environ['SUPABASE_DB'] port = os.environ['SUPABASE_PORT'] username = os.environ['SUPABASE_USER'] password = os.environ['SUPABASE_PASSWD'] Connection: engine, need for connection to database base, need for work with table session, for tasks - create, upload, commit, delete engine = create_engine(f'postgresql://{username}:{password}@{host}:{port}/{database}', echo=True) base = declarative_base() session_maker = sessionmaker(bind=engine) session = session_maker()","title":"Connection"},{"location":"SQLAlchemy/2-sql_table_list/","text":"Table List Filename: sql_table_list.py Import: python from sql_connection import base from sqlalchemy import Column, Integer, String Table properties: python class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"SQLAlchemy/2-sql_table_list/#table-list","text":"Filename: sql_table_list.py Import: python from sql_connection import base from sqlalchemy import Column, Integer, String Table properties: python class TableCustomers(base): __tablename__ = 'Customers' id = Column(Integer, primary_key=True) name = Column(String(50)) age = Column(Integer) grade = Column(String(50))","title":"Table List"},{"location":"SQLAlchemy/3_sql_create_table/","text":"Create Table Filename: sql_create_table.py Import: python from sql_connection import base, engine from sql_table_list import TableCustomers RUN: Create Table python table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"SQLAlchemy/3_sql_create_table/#create-table","text":"Filename: sql_create_table.py Import: python from sql_connection import base, engine from sql_table_list import TableCustomers RUN: Create Table python table = TableCustomers base.metadata.create_all(engine)","title":"Create Table"},{"location":"SQLAlchemy/4-sql_insert_data/","text":"Insert data Filename: sql_insert_data.py Upload one string: Import: python from sql_connection import session from sql_table_list import TableCustomers Parameters: python table = TableCustomers Data: python row_0 = table(name=\"Marry\", age=26, grade=\"R\") Add data and commit: python session.add(row) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id Upload more string: Data python row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") Add data and commit: python session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Insert data"},{"location":"SQLAlchemy/4-sql_insert_data/#insert-data","text":"Filename: sql_insert_data.py","title":"Insert data"},{"location":"SQLAlchemy/4-sql_insert_data/#upload-one-string","text":"Import: python from sql_connection import session from sql_table_list import TableCustomers Parameters: python table = TableCustomers Data: python row_0 = table(name=\"Marry\", age=26, grade=\"R\") Add data and commit: python session.add(row) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name)s, %(age)s, %(grade)s) RETURNING \"Customers\".id","title":"Upload one string:"},{"location":"SQLAlchemy/4-sql_insert_data/#upload-more-string","text":"Data python row_1 = table(name=\"Fredy\", age=38, grade=\"C\") row_2 = table(name=\"Mark\", age=42, grade=\"D\") row_3 = table(name=\"Jack\", age=41, grade=\"A\") row_4 = table(name=\"Brain\", age=38, grade=\"B\") row_5 = table(name=\"Alice\", age=41, grade=\"E\") Add data and commit: python session.add_all([row_1, row_2, row_3, row_4, row_5]) session.commit() LOG: SQL Format: sql INSERT INTO \"Customers\" (name, age, grade) VALUES (%(name__0)s, %(age__0)s, %(grade__0)s), (%(name__1)s, %(age__1)s, %(grade__1)s), (%(name__2)s, %(age__2)s, %(grade__2)s), (%(name__3)s, %(age__3)s, %(grade__3)s), (%(name__4)s, %(age__4)s, %(grade__4)s) RETURNING \"Customers\".id","title":"Upload more string:"},{"location":"SQLAlchemy/5-sql_read_data/","text":"Get Data Filename: sql_read_data.py Import: python from sql_connection import session from sql_table_list import TableCustomers Simple query Query: python table = TableCustomers query = session.query(table) Get data: python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Marry, get.age: 26, get.grade: R get.name: Fredy, get.age: 38, get.grade: C get.name: Mark, get.age: 42, get.grade: D get.name: Jack, get.age: 21, get.grade: A get.name: Brain, get.age: 38, get.grade: B get.name: Alice, get.age: 41, get.grade: E LOG: SQL Fortmat: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" ORDER BY Query: python table = TableCustomers query = session.query(table).order_by(table.name) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Alice, get.age: 41, get.grade: E get.name: Brain, get.age: 38, get.grade: B get.name: Fredy, get.age: 38, get.grade: C get.name: Jack, get.age: 21, get.grade: A get.name: Mark, get.age: 42, get.grade: D get.name: Marry, get.age: 26, get.grade: R ``` SQL format log: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" FILTER Query: python table = TableCustomers query = session.query(table).order_by(table.name).filter(table.age <= 30) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Jack, get.age: 21, get.grade: A get.name: Marry, get.age: 26, get.grade: R ``` LOG: SQL Format: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" WHERE \"Customers\".age <= %(age_1)s ORDER BY \"Customers\".name","title":"Get Data"},{"location":"SQLAlchemy/5-sql_read_data/#get-data","text":"Filename: sql_read_data.py Import: python from sql_connection import session from sql_table_list import TableCustomers","title":"Get Data"},{"location":"SQLAlchemy/5-sql_read_data/#simple-query","text":"Query: python table = TableCustomers query = session.query(table) Get data: python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Marry, get.age: 26, get.grade: R get.name: Fredy, get.age: 38, get.grade: C get.name: Mark, get.age: 42, get.grade: D get.name: Jack, get.age: 21, get.grade: A get.name: Brain, get.age: 38, get.grade: B get.name: Alice, get.age: 41, get.grade: E LOG: SQL Fortmat: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\"","title":"Simple query"},{"location":"SQLAlchemy/5-sql_read_data/#order-by","text":"Query: python table = TableCustomers query = session.query(table).order_by(table.name) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Alice, get.age: 41, get.grade: E get.name: Brain, get.age: 38, get.grade: B get.name: Fredy, get.age: 38, get.grade: C get.name: Jack, get.age: 21, get.grade: A get.name: Mark, get.age: 42, get.grade: D get.name: Marry, get.age: 26, get.grade: R ``` SQL format log: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\"","title":"ORDER BY"},{"location":"SQLAlchemy/5-sql_read_data/#filter","text":"Query: python table = TableCustomers query = session.query(table).order_by(table.name).filter(table.age <= 30) Get data: ```python for get in query: print(f\"\\tget.name: {get.name}, \\tget.age: {get.age}, \\tget.grade: {get.grade}\") output get.name: Jack, get.age: 21, get.grade: A get.name: Marry, get.age: 26, get.grade: R ``` LOG: SQL Format: sql SELECT \"Customers\".id AS \"Customers_id\", \"Customers\".name AS \"Customers_name\", \"Customers\".age AS \"Customers_age\", \"Customers\".grade AS \"Customers_grade\" FROM \"Customers\" WHERE \"Customers\".age <= %(age_1)s ORDER BY \"Customers\".name","title":"FILTER"},{"location":"mkdocs/ConfigYAMLexamples/","text":"Config yaml examples Site Name site_name: NS-Labs Navigation site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' Themes External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Examples"},{"location":"mkdocs/ConfigYAMLexamples/#config-yaml-examples","text":"","title":"Config yaml examples"},{"location":"mkdocs/ConfigYAMLexamples/#site-name","text":"site_name: NS-Labs","title":"Site Name"},{"location":"mkdocs/ConfigYAMLexamples/#navigation","text":"site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md'","title":"Navigation"},{"location":"mkdocs/ConfigYAMLexamples/#themes","text":"External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Themes"},{"location":"mkdocs/GH-Actions/","text":"GitHub Actions using: Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions"},{"location":"mkdocs/GH-Actions/#github-actions-using","text":"Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions using:"},{"location":"mkdocs/info/","text":"Welcome to MkDocs (NAME) Commands: mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site Project layout: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files 1. Start create MkDocs mkdocs new . - create new mkdocs.yml file mkdocs serve - run server 2. Build site files mkdocs build Use Theme Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"About"},{"location":"mkdocs/info/#welcome-to-mkdocs-name","text":"","title":"Welcome to MkDocs (NAME)"},{"location":"mkdocs/info/#commands","text":"mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site","title":"Commands:"},{"location":"mkdocs/info/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files","title":"Project layout:"},{"location":"mkdocs/info/#1-start-create-mkdocs","text":"mkdocs new . - create new mkdocs.yml file mkdocs serve - run server","title":"1. Start create MkDocs"},{"location":"mkdocs/info/#2-build-site-files","text":"mkdocs build","title":"2. Build site files"},{"location":"mkdocs/info/#use-theme","text":"Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"Use Theme"}]}