{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Page (index.md) \u042d\u0442\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430.","title":"Home Page (index.md)"},{"location":"#home-page-indexmd","text":"\u042d\u0442\u043e \u0434\u043e\u043c\u0430\u0448\u043d\u044f\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430.","title":"Home Page (index.md)"},{"location":"EnvironmentVariables/EnvVar/","text":"Environment Variables 1. Linux 1.1. Check variables env 1.2. Add new variable (temporary) export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' export EMAIL='salavat@nigmatullin.net' echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW echo $EMAIL # salavat@nigmatullin.net The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\" 1.3. Add new variable (forewer) Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS 2. Python 2.1. Read the system variables: import os os_env = os.environ os_env = dict(os_env) print(f\"Count of variables: \\t{len(os_env)}\") print(f\"Variable Keyword: \\t\\t{os_env.keys()}\") Count of variables: 55 Variable Keyword: dict_keys(['PATH', 'LC_MEASUREMENT', 'XAUTHORITY', 'LC_TELEPHONE', 'XDG_DATA_DIRS', 'LC_TIME', 'DBUS_SESSION_BUS_ADDRESS', 'XDG_CURRENT_DESKTOP', 'QT_AUTO_SCREEN_SCALE_FACTOR', 'SSH_AGENT_PID', 'LC_PAPER', 'SESSION_MANAGER', 'LOGNAME', 'PWD', 'PAM_KWALLET5_LOGIN', 'IM_CONFIG_PHASE', 'PYCHARM_HOSTED', 'XCURSOR_THEME', 'LANGUAGE', 'PYTHONPATH', 'KDE_SESSION_VERSION', 'SHELL', 'LC_ADDRESS', 'KDE_FULL_SESSION', 'XDG_SESSION_PATH', 'SYSTEMD_EXEC_PID', 'XDG_SESSION_DESKTOP', 'SHLVL', 'LC_IDENTIFICATION', 'KDE_APPLICATIONS_AS_SCOPE', 'LC_MONETARY', 'KDE_SESSION_UID', 'XDG_CONFIG_DIRS', 'LANG', 'XDG_SEAT_PATH', 'XDG_SESSION_ID', 'XDG_SESSION_TYPE', 'DISPLAY', 'GTK_RC_FILES', 'LC_NAME', 'XDG_SESSION_CLASS', 'XCURSOR_SIZE', 'PYTHONIOENCODING', 'GPG_AGENT_INFO', 'DESKTOP_SESSION', 'USER', 'GTK2_RC_FILES', 'QT_ACCESSIBILITY', 'LC_NUMERIC', 'SSH_AUTH_SOCK', 'XDG_SEAT', 'PYTHONUNBUFFERED', 'XDG_VTNR', 'XDG_RUNTIME_DIR', 'HOME']) 2.2. Get variable: import os env_path = os.getenv('PATH') print(f'PATH Variable: {env_path}') PATH Variable: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin 2.2. Add custom variables to system: Create file .env Add customer variables: PY_MYSQL_ADDR=\"172.30.0.100\" PY_MYSQL_USER=\"root\" PY_MYSQL_PSWD=\"Pass_1234\" Install python-dotenv For more information about: dotEnv pip install python-dotenv Python code, step #1 Load customer variables from dotenv import load_dotenv load_dotenv() # take environment variables from .env Python code, step #2 Checking system environment variables: from dotenv import load_dotenv import os os_env = os.environ env_before = list(dict(os_env).keys()) print(f\"Count of variables:\\t{len(os_env)}\") load_dotenv() print(f\"Count of variables:\\t{len(os_env)}\") env_after = list(dict(os_env).keys()) env_difference = [] for element in env_after: if element not in env_before: env_difference.append(element) print(f'New Env Variables:\\t{env_difference}') Result: Count of variables: 55 Count of variables: 58 New Env Variables: ['PY_MYSQL_ADDR', 'PY_MYSQL_USER', 'PY_MYSQL_PSWD'] Python code, step #3 Check variables from dotenv import load_dotenv import os load_dotenv() os_env = dict(os.environ) print(f\"PY_MYSQL_ADDR: {os_env['PY_MYSQL_ADDR']}\") print(f\"PY_MYSQL_USER: {os_env['PY_MYSQL_USER']}\") print(f\"PY_MYSQL_PSWD: {os_env['PY_MYSQL_PSWD']}\") PY_MYSQL_ADDR: 172.30.0.100 PY_MYSQL_USER: root PY_MYSQL_PSWD: Pass_1234 3. GitHub Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"Environment Variables"},{"location":"EnvironmentVariables/EnvVar/#environment-variables","text":"","title":"Environment Variables"},{"location":"EnvironmentVariables/EnvVar/#1-linux","text":"","title":"1. Linux"},{"location":"EnvironmentVariables/EnvVar/#11-check-variables","text":"env","title":"1.1. Check variables"},{"location":"EnvironmentVariables/EnvVar/#12-add-new-variable-temporary","text":"export ACCESS_KEY='LSOED3kNEF9NWLS0KWNW' export EMAIL='salavat@nigmatullin.net' echo $ACCESS_KEY # LSOED3kNEF9NWLS0KWNW echo $EMAIL # salavat@nigmatullin.net The lifecycle of this variable will be one active terminal session. After closing the terminal -- the variable will be deleted. To save the variable forever, you need to add a command to the file \".bashrc\"","title":"1.2. Add new variable (temporary)"},{"location":"EnvironmentVariables/EnvVar/#13-add-new-variable-forewer","text":"Need find the file .bashrc Add export key=\"value\" command and save Re-open terminal and check created variable sudo find /home -name \".bashrc\" # /home/salavat/.bashrc echo \"export CITY='PARIS'\" >> /home/salavat/.bashrc echo $CITY # PARIS env | grep \"CITY\" # CITY=PARIS","title":"1.3. Add new variable (forewer)"},{"location":"EnvironmentVariables/EnvVar/#2-python","text":"","title":"2. Python"},{"location":"EnvironmentVariables/EnvVar/#21-read-the-system-variables","text":"import os os_env = os.environ os_env = dict(os_env) print(f\"Count of variables: \\t{len(os_env)}\") print(f\"Variable Keyword: \\t\\t{os_env.keys()}\") Count of variables: 55 Variable Keyword: dict_keys(['PATH', 'LC_MEASUREMENT', 'XAUTHORITY', 'LC_TELEPHONE', 'XDG_DATA_DIRS', 'LC_TIME', 'DBUS_SESSION_BUS_ADDRESS', 'XDG_CURRENT_DESKTOP', 'QT_AUTO_SCREEN_SCALE_FACTOR', 'SSH_AGENT_PID', 'LC_PAPER', 'SESSION_MANAGER', 'LOGNAME', 'PWD', 'PAM_KWALLET5_LOGIN', 'IM_CONFIG_PHASE', 'PYCHARM_HOSTED', 'XCURSOR_THEME', 'LANGUAGE', 'PYTHONPATH', 'KDE_SESSION_VERSION', 'SHELL', 'LC_ADDRESS', 'KDE_FULL_SESSION', 'XDG_SESSION_PATH', 'SYSTEMD_EXEC_PID', 'XDG_SESSION_DESKTOP', 'SHLVL', 'LC_IDENTIFICATION', 'KDE_APPLICATIONS_AS_SCOPE', 'LC_MONETARY', 'KDE_SESSION_UID', 'XDG_CONFIG_DIRS', 'LANG', 'XDG_SEAT_PATH', 'XDG_SESSION_ID', 'XDG_SESSION_TYPE', 'DISPLAY', 'GTK_RC_FILES', 'LC_NAME', 'XDG_SESSION_CLASS', 'XCURSOR_SIZE', 'PYTHONIOENCODING', 'GPG_AGENT_INFO', 'DESKTOP_SESSION', 'USER', 'GTK2_RC_FILES', 'QT_ACCESSIBILITY', 'LC_NUMERIC', 'SSH_AUTH_SOCK', 'XDG_SEAT', 'PYTHONUNBUFFERED', 'XDG_VTNR', 'XDG_RUNTIME_DIR', 'HOME'])","title":"2.1. Read the system variables:"},{"location":"EnvironmentVariables/EnvVar/#22-get-variable","text":"import os env_path = os.getenv('PATH') print(f'PATH Variable: {env_path}') PATH Variable: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin","title":"2.2. Get variable:"},{"location":"EnvironmentVariables/EnvVar/#22-add-custom-variables-to-system","text":"Create file .env Add customer variables: PY_MYSQL_ADDR=\"172.30.0.100\" PY_MYSQL_USER=\"root\" PY_MYSQL_PSWD=\"Pass_1234\" Install python-dotenv For more information about: dotEnv pip install python-dotenv","title":"2.2. Add custom variables to system:"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-1","text":"Load customer variables from dotenv import load_dotenv load_dotenv() # take environment variables from .env","title":"Python code, step #1"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-2","text":"Checking system environment variables: from dotenv import load_dotenv import os os_env = os.environ env_before = list(dict(os_env).keys()) print(f\"Count of variables:\\t{len(os_env)}\") load_dotenv() print(f\"Count of variables:\\t{len(os_env)}\") env_after = list(dict(os_env).keys()) env_difference = [] for element in env_after: if element not in env_before: env_difference.append(element) print(f'New Env Variables:\\t{env_difference}') Result: Count of variables: 55 Count of variables: 58 New Env Variables: ['PY_MYSQL_ADDR', 'PY_MYSQL_USER', 'PY_MYSQL_PSWD']","title":"Python code, step #2"},{"location":"EnvironmentVariables/EnvVar/#python-code-step-3","text":"Check variables from dotenv import load_dotenv import os load_dotenv() os_env = dict(os.environ) print(f\"PY_MYSQL_ADDR: {os_env['PY_MYSQL_ADDR']}\") print(f\"PY_MYSQL_USER: {os_env['PY_MYSQL_USER']}\") print(f\"PY_MYSQL_PSWD: {os_env['PY_MYSQL_PSWD']}\") PY_MYSQL_ADDR: 172.30.0.100 PY_MYSQL_USER: root PY_MYSQL_PSWD: Pass_1234","title":"Python code, step #3"},{"location":"EnvironmentVariables/EnvVar/#3-github","text":"Open GitHub Repository Navigate to Settings > Secrets and variables > Actions In Variables tab click \"New Repository variables\" Add variables","title":"3. GitHub"},{"location":"aws/s3-bucket/","text":"AWS You will learn \"How to\": 1. [Done] Create new Bucket 2. [Done] Get list Bucket - Get via RESOURCE - Get via CLIENT 3. [Done] Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 7. Check Access Permission Before using Boto3, you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI. You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user. Configure AWS CLI pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json Amazon S3 examples https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html 1. Create new Bucket Simple code: import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) Code with exceptions import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\") 2. Get list of Bucket 2.1. Get via RESOURCE: import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 2.2. Get via CLIENT: import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage 3. Upload file to Bucket Upload via \"RESOURCE\" and \"PUT_OBJECT\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file) Upload via \"CLIENT\" and \"UPLOAD_FILE\" import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename) 7. Check Access Permission import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"Amazon AWS"},{"location":"aws/s3-bucket/#aws","text":"You will learn \"How to\": 1. [Done] Create new Bucket 2. [Done] Get list Bucket - Get via RESOURCE - Get via CLIENT 3. [Done] Upload file to Bucket - Check uploaded files - Delete file from Bucket - Delete Bucket 7. Check Access Permission Before using Boto3, you need to set up authentication credentials for your AWS account using either the IAM Console or the AWS CLI. You can either choose an existing user or create a new one. For instructions about how to create a user using the IAM Console, see Creating IAM users. Once the user has been created, see Managing access keys to learn how to create and retrieve the keys used to authenticate the user.","title":"AWS"},{"location":"aws/s3-bucket/#configure-aws-cli","text":"pip install awscli aws configure AWS Access Key ID [none]: ****************VQNB AWS Secret Access Key [none]: ****************AMAm Default region name [none]: eu-central-1 Default output format [none]: json","title":"Configure AWS CLI"},{"location":"aws/s3-bucket/#amazon-s3-examples","text":"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/s3-examples.html","title":"Amazon S3 examples"},{"location":"aws/s3-bucket/#1-create-new-bucket","text":"","title":"1. Create new Bucket"},{"location":"aws/s3-bucket/#simple-code","text":"import boto3 bucket_name = \"new-storage4\" region = \"eu-central-1\" s3 = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location)","title":"Simple code:"},{"location":"aws/s3-bucket/#code-with-exceptions","text":"import logging import boto3 from botocore.exceptions import ClientError def create_bucket(bucket_name, region=None): \"\"\" Create an S3 bucket in a specified region :param bucket_name: Bucket name :param region: set region, example: us-west-2 :return: True if bucket created, else False \"\"\" try: if region is None: s3_client = boto3.client('s3') s3_client.create_bucket(Bucket=bucket_name) else: s3_client = boto3.client('s3', region_name=region) location = {'LocationConstraint': region} s3_client.create_bucket(Bucket=bucket_name, CreateBucketConfiguration=location) except ClientError as error: logging.error(error) return False return True create_bucket(\"new-storage3\", \"eu-central-1\")","title":"Code with exceptions"},{"location":"aws/s3-bucket/#2-get-list-of-bucket","text":"","title":"2. Get list of Bucket"},{"location":"aws/s3-bucket/#21-get-via-resource","text":"import boto3 s3 = boto3.resource('s3') print('Existing buckets:') for bucket in s3.buckets.all(): print(f\"\\t{bucket.name}\") Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.1. Get via RESOURCE:"},{"location":"aws/s3-bucket/#22-get-via-client","text":"import boto3 s3 = boto3.client('s3') response = s3.list_buckets() print('Existing buckets:') for bucket in response['Buckets']: print(f'\\t\\t{bucket[\"Name\"]}') Existing buckets: new-storage3 ns-lab-web ns-lab.open-storage","title":"2.2. Get via CLIENT:"},{"location":"aws/s3-bucket/#3-upload-file-to-bucket","text":"","title":"3. Upload file to Bucket"},{"location":"aws/s3-bucket/#upload-via-resource-and-put_object","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-6.jpg' s3 = boto3.resource('s3') file = open(filepath, 'rb') bucket = s3.Bucket(bucket_name) bucket.put_object(Key=filename, Body=file)","title":"Upload via \"RESOURCE\" and \"PUT_OBJECT\""},{"location":"aws/s3-bucket/#upload-via-client-and-upload_file","text":"import boto3 bucket_name = 'new-storage3' filepath = '/home/salavat/Pictures/picture.jpg' filename = 'photo-7.jpg' s3 = boto3.client('s3') s3.upload_file(filepath, bucket_name, filename)","title":"Upload via \"CLIENT\" and \"UPLOAD_FILE\""},{"location":"aws/s3-bucket/#7-check-access-permission","text":"import boto3 # Retrieve a bucket's ACL s3 = boto3.client('s3') result = s3.get_bucket_acl(Bucket='ns-lab-web') print(result) print(f\"Permission:\\t{result['Grants'][0]['Permission']}\") {'ResponseMetadata': {'RequestId': '0KH7CJF83GB8TE4W', 'HostId': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'HTTPStatusCode': 200, 'HTTPHeaders': {'x-amz-id-2': '+mqxBWKk4+INjELAEg+pICxfT8cDEU0/CpZPAbYeDUWGo3t6XfkoCb/RiL4Tb6GH90vk+x/bNaM=', 'x-amz-request-id': '0KH7CJF83GB8TE4W', 'date': 'Wed, 15 Feb 2023 21:11:46 GMT', 'content-type': 'application/xml', 'transfer-encoding': 'chunked', 'server': 'AmazonS3'}, 'RetryAttempts': 1}, 'Owner': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0'}, 'Grants': [{'Grantee': {'ID': 'a832a8b8a4e6cf3a0ca798daa02b087110234b6db836b61904789188f9615fb0', 'Type': 'CanonicalUser'}, 'Permission': 'FULL_CONTROL'}]} Permission: FULL_CONTROL","title":"7. Check Access Permission"},{"location":"mkdocs/ConfigYAMLexamples/","text":"Config yaml examples Site Name site_name: NS-Labs Navigation site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' Themes External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Examples"},{"location":"mkdocs/ConfigYAMLexamples/#config-yaml-examples","text":"","title":"Config yaml examples"},{"location":"mkdocs/ConfigYAMLexamples/#site-name","text":"site_name: NS-Labs","title":"Site Name"},{"location":"mkdocs/ConfigYAMLexamples/#navigation","text":"site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md'","title":"Navigation"},{"location":"mkdocs/ConfigYAMLexamples/#themes","text":"External Themes: GitHub MkDocs-Themes Install pip install mkdocs-windmill yml config site_name: NS-Labs nav: - Amazon AWS: 'aws/s3-bucket.md' - Python Learn: 'python/class.md' - MkDocs Info: - About: 'mkdocs/info.md' - GitHub Actions: 'mkdocs/GH-Actions.md' - Examples: 'mkdocs/ConfigYAMLexamples.md' theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust prev_next_buttons_location: bottom","title":"Themes"},{"location":"mkdocs/GH-Actions/","text":"GitHub Actions using: Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions"},{"location":"mkdocs/GH-Actions/#github-actions-using","text":"Create file path: .github/workflow/ci.yml Write in ci.yml file: name: ci on: push: branches: - master permissions: contents: write jobs: deploy: runs-on: ubuntu-latest steps: - uses: actions/checkout@v3 - uses: actions/setup-python@v4 with: python-version: 3.9 # - uses: actions/cache@v2 # with: # key: ${{ github.ref }} # path: .cache - run: pip install mkdocs-material - run: mkdocs gh-deploy --force","title":"GitHub Actions using:"},{"location":"mkdocs/info/","text":"Welcome to MkDocs (NAME) Commands: mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site Project layout: mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files 1. Start create MkDocs mkdocs new . - create new mkdocs.yml file mkdocs serve - run server 2. Build site files mkdocs build Use Theme Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"About"},{"location":"mkdocs/info/#welcome-to-mkdocs-name","text":"","title":"Welcome to MkDocs (NAME)"},{"location":"mkdocs/info/#commands","text":"mkdocs new [dir-name] - Create a new project mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site","title":"Commands:"},{"location":"mkdocs/info/#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. aws/ s3-bucket.md ... # Other markdown pages, images and other files","title":"Project layout:"},{"location":"mkdocs/info/#1-start-create-mkdocs","text":"mkdocs new . - create new mkdocs.yml file mkdocs serve - run server","title":"1. Start create MkDocs"},{"location":"mkdocs/info/#2-build-site-files","text":"mkdocs build","title":"2. Build site files"},{"location":"mkdocs/info/#use-theme","text":"Local Theme theme: name: readthedocs highlightjs: true hljs_languages: - yaml - rust External Themes https://github.com/mkdocs/mkdocs/wiki/MkDocs-Themes Example: pip install mkdocs-windmill","title":"Use Theme"},{"location":"python/class/","text":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b) \u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445 \u041f\u0440\u0438\u043c\u0435\u0440 1 - list Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # [] \u041f\u0440\u0438\u043c\u0435\u0440 2 - int Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes() Class class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Python Learn"},{"location":"python/class/#objects","text":"\u041e\u0431\u044a\u0435\u043a\u0442 - \u044d\u0442\u043e\u0439 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440 \u0441\u043e\u0441\u0442\u043e\u044f\u0449\u0438\u0439 \u0438\u0437: 1. \u0414\u0430\u043d\u043d\u044b\u0445 (Attributes) \u0438 \u0441\u043e\u0441\u0442\u043e\u044f\u043d\u0438\u0439 2. \u041f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f (Method) \u041f\u043e \u0441\u043e\u0434\u0435\u0440\u0436\u0438\u043c\u043e\u043c\u0443 \u043c\u043e\u0436\u043d\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u0442\u044c \u0442\u0438\u043f \u0434\u0430\u043d\u043d\u044b\u0445","title":"Objects (\u041e\u0431\u044a\u0435\u043a\u0442\u044b)"},{"location":"python/class/#1-list","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432 \u0441\u043f\u0438\u0441\u043a\u0435 mylist = [\"BMW\",\"Kia\", \"Audi\", \"Ford\"] print(type(mylist)) # <class 'list'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0441\u043f\u0438\u0441\u043a\u0430 mylist.count() mylist.append() mylist.sort() mylist.pop() mylist.index() mylist.remove() mylist.insert() mylist.extend() mylist.copy() mylist.clear() Examples: print(mylist) # ['BMW', 'Kia', 'Audi', 'Ford'] print(mylist.count(\"BMW\")) # 1 print(mylist.index(\"BMW\")) # 0 newlist = mylist.copy() # ['BMW', 'Kia', 'Audi', 'Ford'] mylist.append(\"Nissan\") # ['BMW', 'Kia', 'Audi', 'Ford', 'Nissan'] mylist.sort() # ['Audi', 'BMW', 'Ford', 'Kia', 'Nissan'] mylist.pop() # ['Audi', 'BMW', 'Ford', 'Kia'] mylist.remove(\"BMW\") # ['Audi', 'Ford', 'Kia'] mylist.insert(0, \"Dodge\") # ['Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # ['Dodge', 'Audi', 'Ford', 'Kia', 'Dodge', 'Audi', 'Ford', 'Kia'] mylist.extend(mylist) # []","title":"\u041f\u0440\u0438\u043c\u0435\u0440 1 - list"},{"location":"python/class/#2-int","text":"Attributes: - \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0435 \u0446\u0435\u043b\u043e\u0435 \u0447\u0438\u0441\u043b\u043e mynumber = 1999 print(type(mynumber)) # <class 'int'> Methods: \u0412\u043e\u0437\u043c\u043e\u0436\u043d\u044b\u0435 \u043f\u043e\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u0434\u043b\u044f \u0446\u0435\u043b\u044b\u0445 \u0447\u0438\u0441\u0435\u043b mynumber.to_bytes() mynumber.conjugate() mynumber.as_integer_ratio() mynumber.bit_count() mynumber.bit_length() mynumber.from_bytes()","title":"\u041f\u0440\u0438\u043c\u0435\u0440 2 - int"},{"location":"python/class/#class","text":"class Person: name = 'Jared' age = 30 print(Person.name) print(Person.age) name \u0438 age - \u044f\u0432\u043b\u044f\u044e\u0442\u0441\u044f Attribute, \u043f\u0440\u0438 \u043e\u0431\u0440\u0430\u0449\u0435\u043d\u0438\u0438 \u043a \u043a\u043b\u0430\u0441\u0441\u0443: Class.attribute","title":"Class"}]}